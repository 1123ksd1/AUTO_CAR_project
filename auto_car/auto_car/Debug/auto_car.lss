
auto_car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000f30  00000fc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000371  0080011c  0080011c  00000fe0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000103c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  0000107c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001681  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fb0  00000000  00000000  000028a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000de2  00000000  00000000  00003855  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003dc  00000000  00000000  00004638  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000076e  00000000  00000000  00004a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006b9  00000000  00000000  00005182  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  0000583b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	8f c2       	rjmp	.+1310   	; 0x534 <__vector_5>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	b9 c0       	rjmp	.+370    	; 0x1b4 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	a6 c1       	rjmp	.+844    	; 0x396 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	20 c2       	rjmp	.+1088   	; 0x4ba <__vector_30>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e3       	ldi	r30, 0x30	; 48
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 31       	cpi	r26, 0x1C	; 28
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	24 e0       	ldi	r18, 0x04	; 4
  b4:	ac e1       	ldi	r26, 0x1C	; 28
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 38       	cpi	r26, 0x8D	; 141
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	58 d1       	rcall	.+688    	; 0x374 <main>
  c4:	33 c7       	rjmp	.+3686   	; 0xf2c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_button>:

// 76543210
// DDRD &= 0x0f;
void init_button(void)
{
	BUTTON_DDR &= ~(1 << BUTTON1PIN);
  c8:	84 b3       	in	r24, 0x14	; 20
  ca:	8f 77       	andi	r24, 0x7F	; 127
  cc:	84 bb       	out	0x14, r24	; 20
  ce:	08 95       	ret

000000d0 <get_button>:
// 버튼이 온전하게 눌렸다 떼어진 상태 이면 1을 리턴 한다. 
int get_button(int button_pin, int button_num)  // 예) BUTTON1 4
{         
	int current_state; 
	                                                   //         1
	current_state = BUTTON_PIN & (1 << button_pin);  //  버튼값을 읽는다. 
  d0:	43 b3       	in	r20, 0x13	; 19
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	f9 01       	movw	r30, r18
  da:	02 c0       	rjmp	.+4      	; 0xe0 <get_button+0x10>
  dc:	ee 0f       	add	r30, r30
  de:	ff 1f       	adc	r31, r31
  e0:	8a 95       	dec	r24
  e2:	e2 f7       	brpl	.-8      	; 0xdc <get_button+0xc>
  e4:	cf 01       	movw	r24, r30
  e6:	84 23       	and	r24, r20
  e8:	95 23       	and	r25, r21
	if (current_state && previous_button_status[button_num]==BUTTON_RELEASE)  // 버튼이 처음 눌려진상태
  ea:	00 97       	sbiw	r24, 0x00	; 0
  ec:	b9 f0       	breq	.+46     	; 0x11c <get_button+0x4c>
  ee:	fb 01       	movw	r30, r22
  f0:	e2 5e       	subi	r30, 0xE2	; 226
  f2:	fe 4f       	sbci	r31, 0xFE	; 254
  f4:	20 81       	ld	r18, Z
  f6:	21 11       	cpse	r18, r1
  f8:	11 c0       	rjmp	.+34     	; 0x11c <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	ff ef       	ldi	r31, 0xFF	; 255
  fc:	2d ee       	ldi	r18, 0xED	; 237
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	f1 50       	subi	r31, 0x01	; 1
 102:	20 40       	sbci	r18, 0x00	; 0
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <get_button+0x30>
 108:	00 c0       	rjmp	.+0      	; 0x10a <get_button+0x3a>
 10a:	00 00       	nop
	{
		_delay_ms(60);   // 노이즈가 지나가기를 기다린다 
		previous_button_status[button_num]=BUTTON_PRESS;  // 처음 눌려진 상태가 아니다
 10c:	fb 01       	movw	r30, r22
 10e:	e2 5e       	subi	r30, 0xE2	; 226
 110:	fe 4f       	sbci	r31, 0xFE	; 254
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	80 83       	st	Z, r24
		return 0;        // 아직은 완전히 눌렸다 떼어진 상태가 아니다. 
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	08 95       	ret
	}     
	else if (previous_button_status[button_num]==BUTTON_PRESS && current_state==BUTTON_RELEASE)
 11c:	fb 01       	movw	r30, r22
 11e:	e2 5e       	subi	r30, 0xE2	; 226
 120:	fe 4f       	sbci	r31, 0xFE	; 254
 122:	20 81       	ld	r18, Z
 124:	21 30       	cpi	r18, 0x01	; 1
 126:	91 f4       	brne	.+36     	; 0x14c <get_button+0x7c>
 128:	89 2b       	or	r24, r25
 12a:	99 f4       	brne	.+38     	; 0x152 <get_button+0x82>
	       // 버튼이 이전에 눌러진 상태였으며 현재는 떼어진 상태
	{
		previous_button_status[button_num]=BUTTON_RELEASE;   // 다음 버튼 상태를 체크하기위해 초기화
 12c:	fb 01       	movw	r30, r22
 12e:	e2 5e       	subi	r30, 0xE2	; 226
 130:	fe 4f       	sbci	r31, 0xFE	; 254
 132:	10 82       	st	Z, r1
 134:	9f ef       	ldi	r25, 0xFF	; 255
 136:	ed ee       	ldi	r30, 0xED	; 237
 138:	f2 e0       	ldi	r31, 0x02	; 2
 13a:	91 50       	subi	r25, 0x01	; 1
 13c:	e0 40       	sbci	r30, 0x00	; 0
 13e:	f0 40       	sbci	r31, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <get_button+0x6a>
 142:	00 c0       	rjmp	.+0      	; 0x144 <get_button+0x74>
 144:	00 00       	nop
	   _delay_ms(60);   // 노이즈가 지나가기를 기다린다
	  return 1;    // 완전히 눌렸다 떼어진 상태임을 리턴
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	08 95       	ret
	}
	 
	 return 0;   // 아직 완전히 스위치를 눌렀다 뗀 상태가 아닌경우 나
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	08 95       	ret
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
	             // 스위치가 open 된 상태                   	
 156:	08 95       	ret

00000158 <auto_mode_check>:
int button1_state = 0;
extern void stop();

void auto_mode_check()
{
	if(get_button(BUTTON1PIN, BUTTON1))
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	87 e0       	ldi	r24, 0x07	; 7
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	b7 df       	rcall	.-146    	; 0xd0 <get_button>
 162:	89 2b       	or	r24, r25
 164:	71 f0       	breq	.+28     	; 0x182 <auto_mode_check+0x2a>
	{
		button1_state = !button1_state;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
 16e:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
 172:	23 2b       	or	r18, r19
 174:	11 f0       	breq	.+4      	; 0x17a <auto_mode_check+0x22>
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
 17e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
	}
	if(button1_state)
 182:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 186:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 18a:	89 2b       	or	r24, r25
 18c:	39 f0       	breq	.+14     	; 0x19c <auto_mode_check+0x44>
	{
		PORTG |= 1<<3;	// led on
 18e:	e5 e6       	ldi	r30, 0x65	; 101
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	88 60       	ori	r24, 0x08	; 8
		stop();
 196:	80 83       	st	Z, r24
 198:	bf c0       	rjmp	.+382    	; 0x318 <stop>
 19a:	08 95       	ret
	}
	else
	{
		PORTG &= ~(1<<3);	// led off
 19c:	e5 e6       	ldi	r30, 0x65	; 101
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	87 7f       	andi	r24, 0xF7	; 247
 1a4:	80 83       	st	Z, r24
 1a6:	08 95       	ret

000001a8 <init_led>:
void led_all_on_off();


void init_led()
{
	DDRG |= 1 << 3;
 1a8:	e4 e6       	ldi	r30, 0x64	; 100
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	88 60       	ori	r24, 0x08	; 8
 1b0:	80 83       	st	Z, r24
 1b2:	08 95       	ret

000001b4 <__vector_16>:
		// ultrasonic_distance_check();
    }
}

void auto_drive()
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	8f 93       	push	r24
 1c0:	9f 93       	push	r25
 1c2:	af 93       	push	r26
 1c4:	bf 93       	push	r27
 1c6:	86 e0       	ldi	r24, 0x06	; 6
 1c8:	82 bf       	out	0x32, r24	; 50
 1ca:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <ms_count>
 1ce:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <ms_count+0x1>
 1d2:	a0 91 2c 01 	lds	r26, 0x012C	; 0x80012c <ms_count+0x2>
 1d6:	b0 91 2d 01 	lds	r27, 0x012D	; 0x80012d <ms_count+0x3>
 1da:	01 96       	adiw	r24, 0x01	; 1
 1dc:	a1 1d       	adc	r26, r1
 1de:	b1 1d       	adc	r27, r1
 1e0:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <ms_count>
 1e4:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <ms_count+0x1>
 1e8:	a0 93 2c 01 	sts	0x012C, r26	; 0x80012c <ms_count+0x2>
 1ec:	b0 93 2d 01 	sts	0x012D, r27	; 0x80012d <ms_count+0x3>
 1f0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <shift_timer>
 1f4:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <shift_timer+0x1>
 1f8:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <shift_timer+0x2>
 1fc:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <shift_timer+0x3>
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	a1 1d       	adc	r26, r1
 204:	b1 1d       	adc	r27, r1
 206:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <shift_timer>
 20a:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <shift_timer+0x1>
 20e:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <shift_timer+0x2>
 212:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <shift_timer+0x3>
 216:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <ultrasonic_trigger_timer>
 21a:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <ultrasonic_trigger_timer+0x1>
 21e:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <ultrasonic_trigger_timer+0x2>
 222:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <ultrasonic_trigger_timer+0x3>
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	a1 1d       	adc	r26, r1
 22a:	b1 1d       	adc	r27, r1
 22c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <ultrasonic_trigger_timer>
 230:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <ultrasonic_trigger_timer+0x1>
 234:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <ultrasonic_trigger_timer+0x2>
 238:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <ultrasonic_trigger_timer+0x3>
 23c:	bf 91       	pop	r27
 23e:	af 91       	pop	r26
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <init_timer0>:
// 1.분주비 계산
// 16000000HZ/64 ==> 250,000 HZ
// 2. T(주기) pulse 1개가 잡아 먹는 시간: 1/f = 1/250000 => 0.000004sec (4us) : 0.004ms
// 3. 8bit timer OV(OV flow) : 0.004ms x 256 == 0.001024sec ==> 1.024ms
//                             0.004ms x 250 == 0.001sec ==> 1ms
  TCNT0 = 6;   // TCNT : 0~256 ==> 정확히 1ms마다 TIMER0_OVF_vect로 진입한다.
 24e:	86 e0       	ldi	r24, 0x06	; 6
 250:	82 bf       	out	0x32, r24	; 50
  TCCR0 |= (1 << CS02) | (0 << CS01) | (0 << CS00);  // (1) 분주비: 64로 설정
 252:	83 b7       	in	r24, 0x33	; 51
 254:	84 60       	ori	r24, 0x04	; 4
 256:	83 bf       	out	0x33, r24	; 51
  TIMSK |= 1 << TOIE0;    // (2) timer0 overflow INT허용
 258:	87 b7       	in	r24, 0x37	; 55
 25a:	81 60       	ori	r24, 0x01	; 1
 25c:	87 bf       	out	0x37, r24	; 55
 25e:	08 95       	ret

00000260 <init_pwm_motor>:
#define MOTOR_DDR DDRB
#define MOTOR_RIGHT_PORT_DDR 5	// OC1A
#define MOTOR_LEFT_PORT_DDR 6	// OC1B
void init_pwm_motor(void)
{
	MOTOR_DRIVER_PORT_DDR |= 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3;	// IN1 IN2 IN3 IN4 --> 출력모드 set
 260:	e1 e6       	ldi	r30, 0x61	; 97
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	8f 60       	ori	r24, 0x0F	; 15
 268:	80 83       	st	Z, r24
	MOTOR_DDR |= 1 << MOTOR_RIGHT_PORT_DDR | 1 << MOTOR_LEFT_PORT_DDR;	// pwm port
 26a:	87 b3       	in	r24, 0x17	; 23
 26c:	80 66       	ori	r24, 0x60	; 96
 26e:	87 bb       	out	0x17, r24	; 23
	// 16000000Hz / 64 --> 250000Hz (timer1에 공급되는 clock)
	// pulse를 256개를 count한다 : 256 / 250000 --> 1.02ms
	// pulse의 절반 127개를 count: 127 / 250000 --> 0.5ms
	// 0x3ff(1023) --> 4ms
	TCCR1B |= 1 << CS11 | 1 << CS10;	// 64분주
 270:	8e b5       	in	r24, 0x2e	; 46
 272:	83 60       	ori	r24, 0x03	; 3
 274:	8e bd       	out	0x2e, r24	; 46
	
	TCCR1B |= 1 << WGM13 | 1 << WGM12;	// 모드14 고속PWM ICR1
 276:	8e b5       	in	r24, 0x2e	; 46
 278:	88 61       	ori	r24, 0x18	; 24
 27a:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= 1 << WGM11 | 0 << WGM10;	// 모드14
 27c:	8f b5       	in	r24, 0x2f	; 47
 27e:	82 60       	ori	r24, 0x02	; 2
 280:	8f bd       	out	0x2f, r24	; 47
	
	TCCR1A |= 1 << COM1A1 | 0 << COM1A0;	// 비반전 모드: OCR값을 만나면 PWM신호가 LOW가 되고
 282:	8f b5       	in	r24, 0x2f	; 47
 284:	80 68       	ori	r24, 0x80	; 128
 286:	8f bd       	out	0x2f, r24	; 47
											//			   TOP값을 만나면 PWM신호가 HIGH가 된다
	TCCR1A |= 1 << COM1B1 | 0 << COM1B0;	// 비반전 모드
 288:	8f b5       	in	r24, 0x2f	; 47
 28a:	80 62       	ori	r24, 0x20	; 32
 28c:	8f bd       	out	0x2f, r24	; 47
	
	MOTOR_DRIVER_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);	// all clear
 28e:	e2 e6       	ldi	r30, 0x62	; 98
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	80 7f       	andi	r24, 0xF0	; 240
 296:	80 83       	st	Z, r24
	MOTOR_DRIVER_PORT |= 1 <<2 | 1 << 0;	// 정회전 모드 set
 298:	80 81       	ld	r24, Z
 29a:	85 60       	ori	r24, 0x05	; 5
 29c:	80 83       	st	Z, r24
	ICR1 = 0x3ff;	// 0x3ff(1023) : 4ms	
 29e:	8f ef       	ldi	r24, 0xFF	; 255
 2a0:	93 e0       	ldi	r25, 0x03	; 3
 2a2:	97 bd       	out	0x27, r25	; 39
 2a4:	86 bd       	out	0x26, r24	; 38
 2a6:	08 95       	ret

000002a8 <forward>:
		break;
	}
}

void forward(int speed)
{
 2a8:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);	// all clear
 2aa:	e2 e6       	ldi	r30, 0x62	; 98
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	90 81       	ld	r25, Z
 2b0:	90 7f       	andi	r25, 0xF0	; 240
 2b2:	90 83       	st	Z, r25
	MOTOR_DRIVER_PORT |= 1 <<2 | 1 << 0;	// 정회전 모드 set
 2b4:	90 81       	ld	r25, Z
 2b6:	95 60       	ori	r25, 0x05	; 5
 2b8:	90 83       	st	Z, r25
	
	OCR1A =	speed;	// PB.5 PWM 출력 left
 2ba:	3b bd       	out	0x2b, r19	; 43
 2bc:	2a bd       	out	0x2a, r18	; 42
	OCR1B =	speed;	// PB.6 PWM 출력 right
 2be:	39 bd       	out	0x29, r19	; 41
 2c0:	28 bd       	out	0x28, r18	; 40
 2c2:	08 95       	ret

000002c4 <backward>:
}

void backward(int speed)
{
 2c4:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);	// all clear
 2c6:	e2 e6       	ldi	r30, 0x62	; 98
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	90 81       	ld	r25, Z
 2cc:	90 7f       	andi	r25, 0xF0	; 240
 2ce:	90 83       	st	Z, r25
	MOTOR_DRIVER_PORT |= 1 << 1 | 1 << 3;	// 0101 역회전 모드 set
 2d0:	90 81       	ld	r25, Z
 2d2:	9a 60       	ori	r25, 0x0A	; 10
 2d4:	90 83       	st	Z, r25
	
	OCR1A =	speed;	// PB.5 PWM 출력 left
 2d6:	3b bd       	out	0x2b, r19	; 43
 2d8:	2a bd       	out	0x2a, r18	; 42
	OCR1B =	speed;	// PB.6 PWM 출력 right
 2da:	39 bd       	out	0x29, r19	; 41
 2dc:	28 bd       	out	0x28, r18	; 40
 2de:	08 95       	ret

000002e0 <left>:
}

void left(int speed)
{
 2e0:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);	// all clear
 2e2:	e2 e6       	ldi	r30, 0x62	; 98
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	90 81       	ld	r25, Z
 2e8:	90 7f       	andi	r25, 0xF0	; 240
 2ea:	90 83       	st	Z, r25
	MOTOR_DRIVER_PORT |= 1 <<2 | 1 << 0;	// 정회전 모드 set
 2ec:	90 81       	ld	r25, Z
 2ee:	95 60       	ori	r25, 0x05	; 5
 2f0:	90 83       	st	Z, r25
	
	OCR1A =	0;	// PB.5 PWM 출력 left
 2f2:	1b bc       	out	0x2b, r1	; 43
 2f4:	1a bc       	out	0x2a, r1	; 42
	OCR1B =	speed;	// PB.6 PWM 출력 right
 2f6:	39 bd       	out	0x29, r19	; 41
 2f8:	28 bd       	out	0x28, r18	; 40
 2fa:	08 95       	ret

000002fc <right>:
}

void right(int speed)
{
 2fc:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);	// all clear
 2fe:	e2 e6       	ldi	r30, 0x62	; 98
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	90 81       	ld	r25, Z
 304:	90 7f       	andi	r25, 0xF0	; 240
 306:	90 83       	st	Z, r25
	MOTOR_DRIVER_PORT |= 1 <<2 | 1 << 0;	// 정회전 모드 set
 308:	90 81       	ld	r25, Z
 30a:	95 60       	ori	r25, 0x05	; 5
 30c:	90 83       	st	Z, r25
	
	OCR1A =	speed;	// PB.5 PWM 출력 left
 30e:	3b bd       	out	0x2b, r19	; 43
 310:	2a bd       	out	0x2a, r18	; 42
	OCR1B =	0;	// PB.6 PWM 출력 right
 312:	19 bc       	out	0x29, r1	; 41
 314:	18 bc       	out	0x28, r1	; 40
 316:	08 95       	ret

00000318 <stop>:
}

void stop()
{
	MOTOR_DRIVER_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);	// all clear
 318:	e2 e6       	ldi	r30, 0x62	; 98
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	80 7f       	andi	r24, 0xF0	; 240
 320:	80 83       	st	Z, r24
	MOTOR_DRIVER_PORT |= 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3;	// stop 모드 set
 322:	80 81       	ld	r24, Z
 324:	8f 60       	ori	r24, 0x0F	; 15
 326:	80 83       	st	Z, r24
	
	OCR1A =	0;	// PB.5 PWM 출력 left
 328:	1b bc       	out	0x2b, r1	; 43
 32a:	1a bc       	out	0x2a, r1	; 42
	OCR1B =	0;	// PB.6 PWM 출력 right
 32c:	19 bc       	out	0x29, r1	; 41
 32e:	18 bc       	out	0x28, r1	; 40
 330:	08 95       	ret

00000332 <manual_mode_run>:
// 'L' 좌회전
// 'R' 우회전
extern volatile uint8_t uart1_rx_data;
void manual_mode_run(void)
{
	switch(uart1_rx_data)
 332:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <uart1_rx_data>
 336:	8c 34       	cpi	r24, 0x4C	; 76
 338:	99 f0       	breq	.+38     	; 0x360 <manual_mode_run+0x2e>
 33a:	28 f4       	brcc	.+10     	; 0x346 <manual_mode_run+0x14>
 33c:	82 34       	cpi	r24, 0x42	; 66
 33e:	61 f0       	breq	.+24     	; 0x358 <manual_mode_run+0x26>
 340:	86 34       	cpi	r24, 0x46	; 70
 342:	31 f0       	breq	.+12     	; 0x350 <manual_mode_run+0x1e>
 344:	08 95       	ret
 346:	82 35       	cpi	r24, 0x52	; 82
 348:	79 f0       	breq	.+30     	; 0x368 <manual_mode_run+0x36>
 34a:	83 35       	cpi	r24, 0x53	; 83
 34c:	89 f0       	breq	.+34     	; 0x370 <manual_mode_run+0x3e>
 34e:	08 95       	ret
	{
		case 'F':	// forward
		forward(500);	// 4us x 500 --> 0.002sec(2ms)
 350:	84 ef       	ldi	r24, 0xF4	; 244
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	a9 cf       	rjmp	.-174    	; 0x2a8 <forward>
		break;
 356:	08 95       	ret
		
		case 'B':	// backward
		backward(500);
 358:	84 ef       	ldi	r24, 0xF4	; 244
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	b3 cf       	rjmp	.-154    	; 0x2c4 <backward>
		break;
 35e:	08 95       	ret
		
		case 'L':	// left
		left(700);
 360:	8c eb       	ldi	r24, 0xBC	; 188
 362:	92 e0       	ldi	r25, 0x02	; 2
 364:	bd cf       	rjmp	.-134    	; 0x2e0 <left>
		break;
		
		case 'R':	// right
		right(700);
 366:	08 95       	ret
 368:	8c eb       	ldi	r24, 0xBC	; 188
 36a:	92 e0       	ldi	r25, 0x02	; 2
		break;
 36c:	c7 cf       	rjmp	.-114    	; 0x2fc <right>
		
		case 'S':	// right
		stop();
 36e:	08 95       	ret
 370:	d3 cf       	rjmp	.-90     	; 0x318 <stop>
 372:	08 95       	ret

00000374 <main>:
}

extern int button1_state;
int main(void)
{	
	init_led();
 374:	19 df       	rcall	.-462    	; 0x1a8 <init_led>
	init_timer0();
 376:	6b df       	rcall	.-298    	; 0x24e <init_timer0>
	init_uart0();
 378:	8c d0       	rcall	.+280    	; 0x492 <init_uart0>
	init_uart1();
 37a:	cc d0       	rcall	.+408    	; 0x514 <init_uart1>
 37c:	a5 de       	rcall	.-694    	; 0xc8 <init_button>
	init_button();
 37e:	70 df       	rcall	.-288    	; 0x260 <init_pwm_motor>
 380:	80 e0       	ldi	r24, 0x00	; 0
	init_pwm_motor();
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <__iob+0x3>
	stdout = &OUTPUT;   // 2. printf가 동작 되도록 stdout에 OUTPUT화일 포인터를 assign
 388:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <__iob+0x2>
	                    // fprintf(stdout,"test\n");  printf("test\n"); scanf("%s"buff);  ==> stdin
	                    // fgets(input,100,stdin); // stdin : keyboard
	
	init_ultrasonic();
 38c:	2f d1       	rcall	.+606    	; 0x5ec <init_ultrasonic>
 38e:	78 94       	sei
	// I2C_LCD_init();
	
	sei();    // 전역적으로 인터럽트 허용
 390:	d0 df       	rcall	.-96     	; 0x332 <manual_mode_run>
//make_pwm_led_control();


    while (1) 
    {
		manual_mode_run();	// bt command로 제어
 392:	e2 de       	rcall	.-572    	; 0x158 <auto_mode_check>
 394:	fd cf       	rjmp	.-6      	; 0x390 <main+0x1c>

00000396 <__vector_18>:
		auto_mode_check();
 396:	1f 92       	push	r1
 398:	0f 92       	push	r0
 39a:	0f b6       	in	r0, 0x3f	; 63
#include "extern.h"

// 1byte를 수신 할때 마다 이곳으로 들어 온다 
// 입력패턴예: led_all_on\n
ISR(USART0_RX_vect)
{
 39c:	0f 92       	push	r0
 39e:	11 24       	eor	r1, r1
 3a0:	0b b6       	in	r0, 0x3b	; 59
 3a2:	0f 92       	push	r0
 3a4:	2f 93       	push	r18
 3a6:	3f 93       	push	r19
 3a8:	4f 93       	push	r20
 3aa:	5f 93       	push	r21
 3ac:	6f 93       	push	r22
 3ae:	7f 93       	push	r23
 3b0:	8f 93       	push	r24
 3b2:	9f 93       	push	r25
 3b4:	af 93       	push	r26
 3b6:	bf 93       	push	r27
 3b8:	ef 93       	push	r30
 3ba:	ff 93       	push	r31
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	1f 92       	push	r1
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
	volatile static int i=0;
	volatile uint8_t data;

//PORTA=0xff;		// led로 불 들어오는지로 동작 확인, 확인 후에는 지운다. 
	
	data = UDR0;   // uart0의 H/W register(UDR0)로 부터 1byte를 읽어 간다. 
 3c6:	8c b1       	in	r24, 0x0c	; 12
 3c8:	89 83       	std	Y+1, r24	; 0x01
	               // data = UDR0를 취하면 UDR0의 내용이 빈다.(move)
//printf("%c\n", data);	확인작업은 printf로 하면 안 좋음

	if (data == '\r' || data == '\n')
 3ca:	89 81       	ldd	r24, Y+1	; 0x01
 3cc:	8d 30       	cpi	r24, 0x0D	; 13
 3ce:	19 f0       	breq	.+6      	; 0x3d6 <__vector_18+0x40>
 3d0:	89 81       	ldd	r24, Y+1	; 0x01
 3d2:	8a 30       	cpi	r24, 0x0A	; 10
 3d4:	61 f5       	brne	.+88     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	{
		rx_buff[rear][i] = '\0';   // 문장의 끝을 알리는  null을 insert
 3d6:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <rear>
 3da:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <rear+0x1>
 3de:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <i.2110>
 3e2:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <i.2110+0x1>
 3e6:	48 e2       	ldi	r20, 0x28	; 40
 3e8:	42 9f       	mul	r20, r18
 3ea:	f0 01       	movw	r30, r0
 3ec:	43 9f       	mul	r20, r19
 3ee:	f0 0d       	add	r31, r0
 3f0:	11 24       	eor	r1, r1
 3f2:	e9 59       	subi	r30, 0x99	; 153
 3f4:	fe 4f       	sbci	r31, 0xFE	; 254
 3f6:	e8 0f       	add	r30, r24
 3f8:	f9 1f       	adc	r31, r25
 3fa:	10 82       	st	Z, r1
		i=0;   // 다음 string을 저장 하기 위해 index값을 0으로 만듬.
 3fc:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <i.2110+0x1>
 400:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <i.2110>
		rear++;
 404:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <rear>
 408:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <rear+0x1>
 40c:	01 96       	adiw	r24, 0x01	; 1
 40e:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <rear+0x1>
 412:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <rear>
		rear %= COMMAND_NUMBER;
 416:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <rear>
 41a:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <rear+0x1>
 41e:	64 e1       	ldi	r22, 0x14	; 20
 420:	70 e0       	ldi	r23, 0x00	; 0
 422:	82 d2       	rcall	.+1284   	; 0x928 <__divmodhi4>
 424:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <rear+0x1>
 428:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <rear>
 42c:	1c c0       	rjmp	.+56     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
		
		// queue full 조건 check하는 로직이 들어 가야 한다.
	}
	else
	{
		rx_buff[rear][i++] = data; 		
 42e:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <rear>
 432:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <rear+0x1>
 436:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <i.2110>
 43a:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <i.2110+0x1>
 43e:	9c 01       	movw	r18, r24
 440:	2f 5f       	subi	r18, 0xFF	; 255
 442:	3f 4f       	sbci	r19, 0xFF	; 255
 444:	30 93 2f 01 	sts	0x012F, r19	; 0x80012f <i.2110+0x1>
 448:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <i.2110>
 44c:	49 81       	ldd	r20, Y+1	; 0x01
 44e:	58 e2       	ldi	r21, 0x28	; 40
 450:	56 9f       	mul	r21, r22
 452:	90 01       	movw	r18, r0
 454:	57 9f       	mul	r21, r23
 456:	30 0d       	add	r19, r0
 458:	11 24       	eor	r1, r1
 45a:	29 59       	subi	r18, 0x99	; 153
 45c:	3e 4f       	sbci	r19, 0xFE	; 254
 45e:	f9 01       	movw	r30, r18
 460:	e8 0f       	add	r30, r24
 462:	f9 1f       	adc	r31, r25
 464:	40 83       	st	Z, r20
	}
}
 466:	0f 90       	pop	r0
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	ff 91       	pop	r31
 46e:	ef 91       	pop	r30
 470:	bf 91       	pop	r27
 472:	af 91       	pop	r26
 474:	9f 91       	pop	r25
 476:	8f 91       	pop	r24
 478:	7f 91       	pop	r23
 47a:	6f 91       	pop	r22
 47c:	5f 91       	pop	r21
 47e:	4f 91       	pop	r20
 480:	3f 91       	pop	r19
 482:	2f 91       	pop	r18
 484:	0f 90       	pop	r0
 486:	0b be       	out	0x3b, r0	; 59
 488:	0f 90       	pop	r0
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	0f 90       	pop	r0
 48e:	1f 90       	pop	r1
 490:	18 95       	reti

00000492 <init_uart0>:
// 2.비동기방식(uart의 경우 clock신호에 의지하지 않고 별도의 부호비트(start/stop)로 
//   data를 구분하는 방식) : data 8bit/none parity
// 3. RX(수신) : interrupt 활성화
void init_uart0(void)
{
	UBRR0H = 0x00;
 492:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207;   // 9600bps 표9-9
 496:	8f ec       	ldi	r24, 0xCF	; 207
 498:	89 b9       	out	0x09, r24	; 9
	
	UCSR0A |= 1 << U2X0;   // 2배속 통신
 49a:	8b b1       	in	r24, 0x0b	; 11
 49c:	82 60       	ori	r24, 0x02	; 2
 49e:	8b b9       	out	0x0b, r24	; 11
	UCSR0C |= 0x06;   // ASYNC(비동기)/data8bit/none parity
 4a0:	e5 e9       	ldi	r30, 0x95	; 149
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	80 81       	ld	r24, Z
 4a6:	86 60       	ori	r24, 0x06	; 6
 4a8:	80 83       	st	Z, r24
	
	// RXEN0 : UART0로 부터 수신이 가능 하도록 설정
	// TXEN0 : UART0로 부터 송신 가능 하도록 설정
	// RXCIE0 : UART0로 부터 1byte가 들어 오면(stopbit까지 수신완료) rx interrupt를 발생시켜라
	UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
 4aa:	8a b1       	in	r24, 0x0a	; 10
 4ac:	88 69       	ori	r24, 0x98	; 152
 4ae:	8a b9       	out	0x0a, r24	; 10
 4b0:	08 95       	ret

000004b2 <UART0_transmit>:
}

// UART0롤 1byte를 전송 하는 함수 
void UART0_transmit(uint8_t data)
{
	while ( !(UCSR0A & 1 << UDRE0))  // 데이터가 전송중이면 전송이 끝날때 까지 기다린다. 
 4b2:	5d 9b       	sbis	0x0b, 5	; 11
 4b4:	fe cf       	rjmp	.-4      	; 0x4b2 <UART0_transmit>
		;    // no operation   NOP
		
    UDR0 = data;   // HW전송 rtegister(UDR0)에 data를 쏴준다. 
 4b6:	8c b9       	out	0x0c, r24	; 12
 4b8:	08 95       	ret

000004ba <__vector_30>:
// 1byte를 수신 할때 마다 이곳으로 들어 온다 
// 입력패턴예: led_all_on\n
volatile uint8_t uart1_rx_data = 0;
extern void UART0_transmit(uint8_t data);
ISR(USART1_RX_vect)
{
 4ba:	1f 92       	push	r1
 4bc:	0f 92       	push	r0
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	0f 92       	push	r0
 4c2:	11 24       	eor	r1, r1
 4c4:	0b b6       	in	r0, 0x3b	; 59
 4c6:	0f 92       	push	r0
 4c8:	2f 93       	push	r18
 4ca:	3f 93       	push	r19
 4cc:	4f 93       	push	r20
 4ce:	5f 93       	push	r21
 4d0:	6f 93       	push	r22
 4d2:	7f 93       	push	r23
 4d4:	8f 93       	push	r24
 4d6:	9f 93       	push	r25
 4d8:	af 93       	push	r26
 4da:	bf 93       	push	r27
 4dc:	ef 93       	push	r30
 4de:	ff 93       	push	r31
	uart1_rx_data = UDR1;   // uart1의 H/W register(UDR1)로 부터 1byte를 읽어 간다. 
 4e0:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 4e4:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <uart1_rx_data>
	               // data1 = UDR1를 취하면 UDR1의 내용이 빈다.(move)
	UART0_transmit(uart1_rx_data);	// 시험용으로 comportmaster에 찍어 본다
 4e8:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <uart1_rx_data>
 4ec:	e2 df       	rcall	.-60     	; 0x4b2 <UART0_transmit>
}
 4ee:	ff 91       	pop	r31
 4f0:	ef 91       	pop	r30
 4f2:	bf 91       	pop	r27
 4f4:	af 91       	pop	r26
 4f6:	9f 91       	pop	r25
 4f8:	8f 91       	pop	r24
 4fa:	7f 91       	pop	r23
 4fc:	6f 91       	pop	r22
 4fe:	5f 91       	pop	r21
 500:	4f 91       	pop	r20
 502:	3f 91       	pop	r19
 504:	2f 91       	pop	r18
 506:	0f 90       	pop	r0
 508:	0b be       	out	0x3b, r0	; 59
 50a:	0f 90       	pop	r0
 50c:	0f be       	out	0x3f, r0	; 63
 50e:	0f 90       	pop	r0
 510:	1f 90       	pop	r1
 512:	18 95       	reti

00000514 <init_uart1>:
// 2.비동기방식(uart의 경우 clock신호에 의지하지 않고 별도의 부호비트(start/stop)로 
//   data를 구분하는 방식) : data 8bit/none parity
// 3. RX(수신) : interrupt 활성화
void init_uart1(void)
{
	UBRR1H = 0x00;
 514:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207;   // 9600bps 표9-9
 518:	8f ec       	ldi	r24, 0xCF	; 207
 51a:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	
	UCSR1A |= 1 << U2X1;   // 2배속 통신
 51e:	eb e9       	ldi	r30, 0x9B	; 155
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	80 81       	ld	r24, Z
 524:	82 60       	ori	r24, 0x02	; 2
 526:	80 83       	st	Z, r24
	//UCSR1C |= 0x06;   // ASYNC(비동기)/data8bit/none parity
	
	// RXEN1 : UART1로 부터 수신이 가능 하도록 설정
	// TXEN1 : UART1로 부터 송신 가능 하도록 설정
	// RXCIE1 : UART1로 부터 1byte가 들어 오면(stopbit까지 수신완료) rx1 interrupt를 발생시켜라
	UCSR1B |= 1 << RXEN1 | 1 << TXEN1 | 1 << RXCIE1;
 528:	ea e9       	ldi	r30, 0x9A	; 154
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	80 81       	ld	r24, Z
 52e:	88 69       	ori	r24, 0x98	; 152
 530:	80 83       	st	Z, r24
 532:	08 95       	ret

00000534 <__vector_5>:
char scm[50] = {0,};

// PE4: 외부 INT4 초음파세넛 상승, 하강에지 둘 다 이곳으로 들어온다.
// 결국은 상승에지에서 1번/ 하강에지에서 1번 2번 들어온다.
ISR(INT4_vect)
{
 534:	1f 92       	push	r1
 536:	0f 92       	push	r0
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	0f 92       	push	r0
 53c:	11 24       	eor	r1, r1
 53e:	0b b6       	in	r0, 0x3b	; 59
 540:	0f 92       	push	r0
 542:	2f 93       	push	r18
 544:	3f 93       	push	r19
 546:	4f 93       	push	r20
 548:	5f 93       	push	r21
 54a:	6f 93       	push	r22
 54c:	7f 93       	push	r23
 54e:	8f 93       	push	r24
 550:	9f 93       	push	r25
 552:	af 93       	push	r26
 554:	bf 93       	push	r27
 556:	ef 93       	push	r30
 558:	ff 93       	push	r31
	// 1. 상승에지
	if(ECHO_PIN & (1 << ECHO))
 55a:	0c 9b       	sbis	0x01, 4	; 1
 55c:	03 c0       	rjmp	.+6      	; 0x564 <__vector_5+0x30>
	{
		TCNT1 = 0;
 55e:	1d bc       	out	0x2d, r1	; 45
 560:	1c bc       	out	0x2c, r1	; 44
 562:	31 c0       	rjmp	.+98     	; 0x5c6 <__vector_5+0x92>
	}
	// 2. 하강에지
	else
	{
		// 에코핀에 들어오는 펄스 길이를 us 단위로 환산
		ultrasonic_distance = 1000000.0 * TCNT1 * 1024 / F_CPU;
 564:	6c b5       	in	r22, 0x2c	; 44
 566:	7d b5       	in	r23, 0x2d	; 45
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	ec d0       	rcall	.+472    	; 0x746 <__floatunsisf>
 56e:	20 e0       	ldi	r18, 0x00	; 0
 570:	34 e2       	ldi	r19, 0x24	; 36
 572:	44 e7       	ldi	r20, 0x74	; 116
 574:	59 e4       	ldi	r21, 0x49	; 73
 576:	75 d1       	rcall	.+746    	; 0x862 <__mulsf3>
 578:	20 e0       	ldi	r18, 0x00	; 0
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	40 e8       	ldi	r20, 0x80	; 128
 57e:	54 e4       	ldi	r21, 0x44	; 68
 580:	70 d1       	rcall	.+736    	; 0x862 <__mulsf3>
 582:	20 e0       	ldi	r18, 0x00	; 0
 584:	34 e2       	ldi	r19, 0x24	; 36
 586:	44 e7       	ldi	r20, 0x74	; 116
 588:	5b e4       	ldi	r21, 0x4B	; 75
 58a:	44 d0       	rcall	.+136    	; 0x614 <__divsf3>
 58c:	ab d0       	rcall	.+342    	; 0x6e4 <__fixsfsi>
 58e:	70 93 66 01 	sts	0x0166, r23	; 0x800166 <ultrasonic_distance+0x1>
 592:	60 93 65 01 	sts	0x0165, r22	; 0x800165 <ultrasonic_distance>
		// ex) TCNT1에 10이 들어 있다
		// 15.625KHz의 1주기가 64us
		// 0.000064 * 10 = 0.00064sec(640us)
		// 640 / 58 --> 11cm
		// 1cm --> 58us소요  
		sprintf(scm, "dis: %d cm", ultrasonic_distance/58);	// cm로 환산
 596:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <ultrasonic_distance>
 59a:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <ultrasonic_distance+0x1>
 59e:	6a e3       	ldi	r22, 0x3A	; 58
 5a0:	70 e0       	ldi	r23, 0x00	; 0
 5a2:	c2 d1       	rcall	.+900    	; 0x928 <__divmodhi4>
 5a4:	7f 93       	push	r23
 5a6:	6f 93       	push	r22
 5a8:	8e e0       	ldi	r24, 0x0E	; 14
 5aa:	91 e0       	ldi	r25, 0x01	; 1
 5ac:	9f 93       	push	r25
 5ae:	8f 93       	push	r24
 5b0:	83 e3       	ldi	r24, 0x33	; 51
 5b2:	91 e0       	ldi	r25, 0x01	; 1
 5b4:	9f 93       	push	r25
 5b6:	8f 93       	push	r24
 5b8:	de d1       	rcall	.+956    	; 0x976 <sprintf>
 5ba:	0f 90       	pop	r0
 5bc:	0f 90       	pop	r0
 5be:	0f 90       	pop	r0
 5c0:	0f 90       	pop	r0
 5c2:	0f 90       	pop	r0
 5c4:	0f 90       	pop	r0
	}
}
 5c6:	ff 91       	pop	r31
 5c8:	ef 91       	pop	r30
 5ca:	bf 91       	pop	r27
 5cc:	af 91       	pop	r26
 5ce:	9f 91       	pop	r25
 5d0:	8f 91       	pop	r24
 5d2:	7f 91       	pop	r23
 5d4:	6f 91       	pop	r22
 5d6:	5f 91       	pop	r21
 5d8:	4f 91       	pop	r20
 5da:	3f 91       	pop	r19
 5dc:	2f 91       	pop	r18
 5de:	0f 90       	pop	r0
 5e0:	0b be       	out	0x3b, r0	; 59
 5e2:	0f 90       	pop	r0
 5e4:	0f be       	out	0x3f, r0	; 63
 5e6:	0f 90       	pop	r0
 5e8:	1f 90       	pop	r1
 5ea:	18 95       	reti

000005ec <init_ultrasonic>:

void init_ultrasonic()	// InitUltrasonic -> microsoft 방식
{
	TRIG_DDR |= 1<<TRIG;	// Output mode 설정
 5ec:	e4 e6       	ldi	r30, 0x64	; 100
 5ee:	f0 e0       	ldi	r31, 0x00	; 0
 5f0:	80 81       	ld	r24, Z
 5f2:	80 61       	ori	r24, 0x10	; 16
 5f4:	80 83       	st	Z, r24
	ECHO_DDR |= ~(1<<ECHO); // Input mode 설정
 5f6:	82 b1       	in	r24, 0x02	; 2
 5f8:	8f 6e       	ori	r24, 0xEF	; 239
 5fa:	82 b9       	out	0x02, r24	; 2
	
	// P289 표12-6
	// 0 1 : 상승 하강 에지 둘 다 interrupt 를 띄우도록 설정한다.
	EICRB |= 0 << ISC41 | 1 << ISC40;
 5fc:	8a b7       	in	r24, 0x3a	; 58
 5fe:	81 60       	ori	r24, 0x01	; 1
 600:	8a bf       	out	0x3a, r24	; 58
	// 16 65535
	// 16MHz : clock
	// 16MHz를 1024분주 16000000/1024 --> 15625 --> 15.625KHz
	// 1주기(1개의 펄스 길이) T = 1/f 1/15625 -> 0.000064sec --> 64us
	
	TCCR3B |= 1 << CS32 | 1 << CS30;	// 1024로 분주 설정
 602:	ea e8       	ldi	r30, 0x8A	; 138
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	80 81       	ld	r24, Z
 608:	85 60       	ori	r24, 0x05	; 5
 60a:	80 83       	st	Z, r24
	
	EIMSK |= 1 << INT4;	// 외부 INT4(ECHO) 사용
 60c:	89 b7       	in	r24, 0x39	; 57
 60e:	80 61       	ori	r24, 0x10	; 16
 610:	89 bf       	out	0x39, r24	; 57
 612:	08 95       	ret

00000614 <__divsf3>:
 614:	0c d0       	rcall	.+24     	; 0x62e <__divsf3x>
 616:	eb c0       	rjmp	.+470    	; 0x7ee <__fp_round>
 618:	e3 d0       	rcall	.+454    	; 0x7e0 <__fp_pscB>
 61a:	40 f0       	brcs	.+16     	; 0x62c <__divsf3+0x18>
 61c:	da d0       	rcall	.+436    	; 0x7d2 <__fp_pscA>
 61e:	30 f0       	brcs	.+12     	; 0x62c <__divsf3+0x18>
 620:	21 f4       	brne	.+8      	; 0x62a <__divsf3+0x16>
 622:	5f 3f       	cpi	r21, 0xFF	; 255
 624:	19 f0       	breq	.+6      	; 0x62c <__divsf3+0x18>
 626:	cc c0       	rjmp	.+408    	; 0x7c0 <__fp_inf>
 628:	51 11       	cpse	r21, r1
 62a:	15 c1       	rjmp	.+554    	; 0x856 <__fp_szero>
 62c:	cf c0       	rjmp	.+414    	; 0x7cc <__fp_nan>

0000062e <__divsf3x>:
 62e:	f0 d0       	rcall	.+480    	; 0x810 <__fp_split3>
 630:	98 f3       	brcs	.-26     	; 0x618 <__divsf3+0x4>

00000632 <__divsf3_pse>:
 632:	99 23       	and	r25, r25
 634:	c9 f3       	breq	.-14     	; 0x628 <__divsf3+0x14>
 636:	55 23       	and	r21, r21
 638:	b1 f3       	breq	.-20     	; 0x626 <__divsf3+0x12>
 63a:	95 1b       	sub	r25, r21
 63c:	55 0b       	sbc	r21, r21
 63e:	bb 27       	eor	r27, r27
 640:	aa 27       	eor	r26, r26
 642:	62 17       	cp	r22, r18
 644:	73 07       	cpc	r23, r19
 646:	84 07       	cpc	r24, r20
 648:	38 f0       	brcs	.+14     	; 0x658 <__divsf3_pse+0x26>
 64a:	9f 5f       	subi	r25, 0xFF	; 255
 64c:	5f 4f       	sbci	r21, 0xFF	; 255
 64e:	22 0f       	add	r18, r18
 650:	33 1f       	adc	r19, r19
 652:	44 1f       	adc	r20, r20
 654:	aa 1f       	adc	r26, r26
 656:	a9 f3       	breq	.-22     	; 0x642 <__divsf3_pse+0x10>
 658:	33 d0       	rcall	.+102    	; 0x6c0 <__divsf3_pse+0x8e>
 65a:	0e 2e       	mov	r0, r30
 65c:	3a f0       	brmi	.+14     	; 0x66c <__divsf3_pse+0x3a>
 65e:	e0 e8       	ldi	r30, 0x80	; 128
 660:	30 d0       	rcall	.+96     	; 0x6c2 <__divsf3_pse+0x90>
 662:	91 50       	subi	r25, 0x01	; 1
 664:	50 40       	sbci	r21, 0x00	; 0
 666:	e6 95       	lsr	r30
 668:	00 1c       	adc	r0, r0
 66a:	ca f7       	brpl	.-14     	; 0x65e <__divsf3_pse+0x2c>
 66c:	29 d0       	rcall	.+82     	; 0x6c0 <__divsf3_pse+0x8e>
 66e:	fe 2f       	mov	r31, r30
 670:	27 d0       	rcall	.+78     	; 0x6c0 <__divsf3_pse+0x8e>
 672:	66 0f       	add	r22, r22
 674:	77 1f       	adc	r23, r23
 676:	88 1f       	adc	r24, r24
 678:	bb 1f       	adc	r27, r27
 67a:	26 17       	cp	r18, r22
 67c:	37 07       	cpc	r19, r23
 67e:	48 07       	cpc	r20, r24
 680:	ab 07       	cpc	r26, r27
 682:	b0 e8       	ldi	r27, 0x80	; 128
 684:	09 f0       	breq	.+2      	; 0x688 <__divsf3_pse+0x56>
 686:	bb 0b       	sbc	r27, r27
 688:	80 2d       	mov	r24, r0
 68a:	bf 01       	movw	r22, r30
 68c:	ff 27       	eor	r31, r31
 68e:	93 58       	subi	r25, 0x83	; 131
 690:	5f 4f       	sbci	r21, 0xFF	; 255
 692:	2a f0       	brmi	.+10     	; 0x69e <__divsf3_pse+0x6c>
 694:	9e 3f       	cpi	r25, 0xFE	; 254
 696:	51 05       	cpc	r21, r1
 698:	68 f0       	brcs	.+26     	; 0x6b4 <__divsf3_pse+0x82>
 69a:	92 c0       	rjmp	.+292    	; 0x7c0 <__fp_inf>
 69c:	dc c0       	rjmp	.+440    	; 0x856 <__fp_szero>
 69e:	5f 3f       	cpi	r21, 0xFF	; 255
 6a0:	ec f3       	brlt	.-6      	; 0x69c <__divsf3_pse+0x6a>
 6a2:	98 3e       	cpi	r25, 0xE8	; 232
 6a4:	dc f3       	brlt	.-10     	; 0x69c <__divsf3_pse+0x6a>
 6a6:	86 95       	lsr	r24
 6a8:	77 95       	ror	r23
 6aa:	67 95       	ror	r22
 6ac:	b7 95       	ror	r27
 6ae:	f7 95       	ror	r31
 6b0:	9f 5f       	subi	r25, 0xFF	; 255
 6b2:	c9 f7       	brne	.-14     	; 0x6a6 <__divsf3_pse+0x74>
 6b4:	88 0f       	add	r24, r24
 6b6:	91 1d       	adc	r25, r1
 6b8:	96 95       	lsr	r25
 6ba:	87 95       	ror	r24
 6bc:	97 f9       	bld	r25, 7
 6be:	08 95       	ret
 6c0:	e1 e0       	ldi	r30, 0x01	; 1
 6c2:	66 0f       	add	r22, r22
 6c4:	77 1f       	adc	r23, r23
 6c6:	88 1f       	adc	r24, r24
 6c8:	bb 1f       	adc	r27, r27
 6ca:	62 17       	cp	r22, r18
 6cc:	73 07       	cpc	r23, r19
 6ce:	84 07       	cpc	r24, r20
 6d0:	ba 07       	cpc	r27, r26
 6d2:	20 f0       	brcs	.+8      	; 0x6dc <__divsf3_pse+0xaa>
 6d4:	62 1b       	sub	r22, r18
 6d6:	73 0b       	sbc	r23, r19
 6d8:	84 0b       	sbc	r24, r20
 6da:	ba 0b       	sbc	r27, r26
 6dc:	ee 1f       	adc	r30, r30
 6de:	88 f7       	brcc	.-30     	; 0x6c2 <__divsf3_pse+0x90>
 6e0:	e0 95       	com	r30
 6e2:	08 95       	ret

000006e4 <__fixsfsi>:
 6e4:	04 d0       	rcall	.+8      	; 0x6ee <__fixunssfsi>
 6e6:	68 94       	set
 6e8:	b1 11       	cpse	r27, r1
 6ea:	b5 c0       	rjmp	.+362    	; 0x856 <__fp_szero>
 6ec:	08 95       	ret

000006ee <__fixunssfsi>:
 6ee:	98 d0       	rcall	.+304    	; 0x820 <__fp_splitA>
 6f0:	88 f0       	brcs	.+34     	; 0x714 <__fixunssfsi+0x26>
 6f2:	9f 57       	subi	r25, 0x7F	; 127
 6f4:	90 f0       	brcs	.+36     	; 0x71a <__fixunssfsi+0x2c>
 6f6:	b9 2f       	mov	r27, r25
 6f8:	99 27       	eor	r25, r25
 6fa:	b7 51       	subi	r27, 0x17	; 23
 6fc:	a0 f0       	brcs	.+40     	; 0x726 <__fixunssfsi+0x38>
 6fe:	d1 f0       	breq	.+52     	; 0x734 <__fixunssfsi+0x46>
 700:	66 0f       	add	r22, r22
 702:	77 1f       	adc	r23, r23
 704:	88 1f       	adc	r24, r24
 706:	99 1f       	adc	r25, r25
 708:	1a f0       	brmi	.+6      	; 0x710 <__fixunssfsi+0x22>
 70a:	ba 95       	dec	r27
 70c:	c9 f7       	brne	.-14     	; 0x700 <__fixunssfsi+0x12>
 70e:	12 c0       	rjmp	.+36     	; 0x734 <__fixunssfsi+0x46>
 710:	b1 30       	cpi	r27, 0x01	; 1
 712:	81 f0       	breq	.+32     	; 0x734 <__fixunssfsi+0x46>
 714:	9f d0       	rcall	.+318    	; 0x854 <__fp_zero>
 716:	b1 e0       	ldi	r27, 0x01	; 1
 718:	08 95       	ret
 71a:	9c c0       	rjmp	.+312    	; 0x854 <__fp_zero>
 71c:	67 2f       	mov	r22, r23
 71e:	78 2f       	mov	r23, r24
 720:	88 27       	eor	r24, r24
 722:	b8 5f       	subi	r27, 0xF8	; 248
 724:	39 f0       	breq	.+14     	; 0x734 <__fixunssfsi+0x46>
 726:	b9 3f       	cpi	r27, 0xF9	; 249
 728:	cc f3       	brlt	.-14     	; 0x71c <__fixunssfsi+0x2e>
 72a:	86 95       	lsr	r24
 72c:	77 95       	ror	r23
 72e:	67 95       	ror	r22
 730:	b3 95       	inc	r27
 732:	d9 f7       	brne	.-10     	; 0x72a <__fixunssfsi+0x3c>
 734:	3e f4       	brtc	.+14     	; 0x744 <__fixunssfsi+0x56>
 736:	90 95       	com	r25
 738:	80 95       	com	r24
 73a:	70 95       	com	r23
 73c:	61 95       	neg	r22
 73e:	7f 4f       	sbci	r23, 0xFF	; 255
 740:	8f 4f       	sbci	r24, 0xFF	; 255
 742:	9f 4f       	sbci	r25, 0xFF	; 255
 744:	08 95       	ret

00000746 <__floatunsisf>:
 746:	e8 94       	clt
 748:	09 c0       	rjmp	.+18     	; 0x75c <__floatsisf+0x12>

0000074a <__floatsisf>:
 74a:	97 fb       	bst	r25, 7
 74c:	3e f4       	brtc	.+14     	; 0x75c <__floatsisf+0x12>
 74e:	90 95       	com	r25
 750:	80 95       	com	r24
 752:	70 95       	com	r23
 754:	61 95       	neg	r22
 756:	7f 4f       	sbci	r23, 0xFF	; 255
 758:	8f 4f       	sbci	r24, 0xFF	; 255
 75a:	9f 4f       	sbci	r25, 0xFF	; 255
 75c:	99 23       	and	r25, r25
 75e:	a9 f0       	breq	.+42     	; 0x78a <__floatsisf+0x40>
 760:	f9 2f       	mov	r31, r25
 762:	96 e9       	ldi	r25, 0x96	; 150
 764:	bb 27       	eor	r27, r27
 766:	93 95       	inc	r25
 768:	f6 95       	lsr	r31
 76a:	87 95       	ror	r24
 76c:	77 95       	ror	r23
 76e:	67 95       	ror	r22
 770:	b7 95       	ror	r27
 772:	f1 11       	cpse	r31, r1
 774:	f8 cf       	rjmp	.-16     	; 0x766 <__floatsisf+0x1c>
 776:	fa f4       	brpl	.+62     	; 0x7b6 <__floatsisf+0x6c>
 778:	bb 0f       	add	r27, r27
 77a:	11 f4       	brne	.+4      	; 0x780 <__floatsisf+0x36>
 77c:	60 ff       	sbrs	r22, 0
 77e:	1b c0       	rjmp	.+54     	; 0x7b6 <__floatsisf+0x6c>
 780:	6f 5f       	subi	r22, 0xFF	; 255
 782:	7f 4f       	sbci	r23, 0xFF	; 255
 784:	8f 4f       	sbci	r24, 0xFF	; 255
 786:	9f 4f       	sbci	r25, 0xFF	; 255
 788:	16 c0       	rjmp	.+44     	; 0x7b6 <__floatsisf+0x6c>
 78a:	88 23       	and	r24, r24
 78c:	11 f0       	breq	.+4      	; 0x792 <__floatsisf+0x48>
 78e:	96 e9       	ldi	r25, 0x96	; 150
 790:	11 c0       	rjmp	.+34     	; 0x7b4 <__floatsisf+0x6a>
 792:	77 23       	and	r23, r23
 794:	21 f0       	breq	.+8      	; 0x79e <__floatsisf+0x54>
 796:	9e e8       	ldi	r25, 0x8E	; 142
 798:	87 2f       	mov	r24, r23
 79a:	76 2f       	mov	r23, r22
 79c:	05 c0       	rjmp	.+10     	; 0x7a8 <__floatsisf+0x5e>
 79e:	66 23       	and	r22, r22
 7a0:	71 f0       	breq	.+28     	; 0x7be <__floatsisf+0x74>
 7a2:	96 e8       	ldi	r25, 0x86	; 134
 7a4:	86 2f       	mov	r24, r22
 7a6:	70 e0       	ldi	r23, 0x00	; 0
 7a8:	60 e0       	ldi	r22, 0x00	; 0
 7aa:	2a f0       	brmi	.+10     	; 0x7b6 <__floatsisf+0x6c>
 7ac:	9a 95       	dec	r25
 7ae:	66 0f       	add	r22, r22
 7b0:	77 1f       	adc	r23, r23
 7b2:	88 1f       	adc	r24, r24
 7b4:	da f7       	brpl	.-10     	; 0x7ac <__floatsisf+0x62>
 7b6:	88 0f       	add	r24, r24
 7b8:	96 95       	lsr	r25
 7ba:	87 95       	ror	r24
 7bc:	97 f9       	bld	r25, 7
 7be:	08 95       	ret

000007c0 <__fp_inf>:
 7c0:	97 f9       	bld	r25, 7
 7c2:	9f 67       	ori	r25, 0x7F	; 127
 7c4:	80 e8       	ldi	r24, 0x80	; 128
 7c6:	70 e0       	ldi	r23, 0x00	; 0
 7c8:	60 e0       	ldi	r22, 0x00	; 0
 7ca:	08 95       	ret

000007cc <__fp_nan>:
 7cc:	9f ef       	ldi	r25, 0xFF	; 255
 7ce:	80 ec       	ldi	r24, 0xC0	; 192
 7d0:	08 95       	ret

000007d2 <__fp_pscA>:
 7d2:	00 24       	eor	r0, r0
 7d4:	0a 94       	dec	r0
 7d6:	16 16       	cp	r1, r22
 7d8:	17 06       	cpc	r1, r23
 7da:	18 06       	cpc	r1, r24
 7dc:	09 06       	cpc	r0, r25
 7de:	08 95       	ret

000007e0 <__fp_pscB>:
 7e0:	00 24       	eor	r0, r0
 7e2:	0a 94       	dec	r0
 7e4:	12 16       	cp	r1, r18
 7e6:	13 06       	cpc	r1, r19
 7e8:	14 06       	cpc	r1, r20
 7ea:	05 06       	cpc	r0, r21
 7ec:	08 95       	ret

000007ee <__fp_round>:
 7ee:	09 2e       	mov	r0, r25
 7f0:	03 94       	inc	r0
 7f2:	00 0c       	add	r0, r0
 7f4:	11 f4       	brne	.+4      	; 0x7fa <__fp_round+0xc>
 7f6:	88 23       	and	r24, r24
 7f8:	52 f0       	brmi	.+20     	; 0x80e <__fp_round+0x20>
 7fa:	bb 0f       	add	r27, r27
 7fc:	40 f4       	brcc	.+16     	; 0x80e <__fp_round+0x20>
 7fe:	bf 2b       	or	r27, r31
 800:	11 f4       	brne	.+4      	; 0x806 <__fp_round+0x18>
 802:	60 ff       	sbrs	r22, 0
 804:	04 c0       	rjmp	.+8      	; 0x80e <__fp_round+0x20>
 806:	6f 5f       	subi	r22, 0xFF	; 255
 808:	7f 4f       	sbci	r23, 0xFF	; 255
 80a:	8f 4f       	sbci	r24, 0xFF	; 255
 80c:	9f 4f       	sbci	r25, 0xFF	; 255
 80e:	08 95       	ret

00000810 <__fp_split3>:
 810:	57 fd       	sbrc	r21, 7
 812:	90 58       	subi	r25, 0x80	; 128
 814:	44 0f       	add	r20, r20
 816:	55 1f       	adc	r21, r21
 818:	59 f0       	breq	.+22     	; 0x830 <__fp_splitA+0x10>
 81a:	5f 3f       	cpi	r21, 0xFF	; 255
 81c:	71 f0       	breq	.+28     	; 0x83a <__fp_splitA+0x1a>
 81e:	47 95       	ror	r20

00000820 <__fp_splitA>:
 820:	88 0f       	add	r24, r24
 822:	97 fb       	bst	r25, 7
 824:	99 1f       	adc	r25, r25
 826:	61 f0       	breq	.+24     	; 0x840 <__fp_splitA+0x20>
 828:	9f 3f       	cpi	r25, 0xFF	; 255
 82a:	79 f0       	breq	.+30     	; 0x84a <__fp_splitA+0x2a>
 82c:	87 95       	ror	r24
 82e:	08 95       	ret
 830:	12 16       	cp	r1, r18
 832:	13 06       	cpc	r1, r19
 834:	14 06       	cpc	r1, r20
 836:	55 1f       	adc	r21, r21
 838:	f2 cf       	rjmp	.-28     	; 0x81e <__fp_split3+0xe>
 83a:	46 95       	lsr	r20
 83c:	f1 df       	rcall	.-30     	; 0x820 <__fp_splitA>
 83e:	08 c0       	rjmp	.+16     	; 0x850 <__fp_splitA+0x30>
 840:	16 16       	cp	r1, r22
 842:	17 06       	cpc	r1, r23
 844:	18 06       	cpc	r1, r24
 846:	99 1f       	adc	r25, r25
 848:	f1 cf       	rjmp	.-30     	; 0x82c <__fp_splitA+0xc>
 84a:	86 95       	lsr	r24
 84c:	71 05       	cpc	r23, r1
 84e:	61 05       	cpc	r22, r1
 850:	08 94       	sec
 852:	08 95       	ret

00000854 <__fp_zero>:
 854:	e8 94       	clt

00000856 <__fp_szero>:
 856:	bb 27       	eor	r27, r27
 858:	66 27       	eor	r22, r22
 85a:	77 27       	eor	r23, r23
 85c:	cb 01       	movw	r24, r22
 85e:	97 f9       	bld	r25, 7
 860:	08 95       	ret

00000862 <__mulsf3>:
 862:	0b d0       	rcall	.+22     	; 0x87a <__mulsf3x>
 864:	c4 cf       	rjmp	.-120    	; 0x7ee <__fp_round>
 866:	b5 df       	rcall	.-150    	; 0x7d2 <__fp_pscA>
 868:	28 f0       	brcs	.+10     	; 0x874 <__mulsf3+0x12>
 86a:	ba df       	rcall	.-140    	; 0x7e0 <__fp_pscB>
 86c:	18 f0       	brcs	.+6      	; 0x874 <__mulsf3+0x12>
 86e:	95 23       	and	r25, r21
 870:	09 f0       	breq	.+2      	; 0x874 <__mulsf3+0x12>
 872:	a6 cf       	rjmp	.-180    	; 0x7c0 <__fp_inf>
 874:	ab cf       	rjmp	.-170    	; 0x7cc <__fp_nan>
 876:	11 24       	eor	r1, r1
 878:	ee cf       	rjmp	.-36     	; 0x856 <__fp_szero>

0000087a <__mulsf3x>:
 87a:	ca df       	rcall	.-108    	; 0x810 <__fp_split3>
 87c:	a0 f3       	brcs	.-24     	; 0x866 <__mulsf3+0x4>

0000087e <__mulsf3_pse>:
 87e:	95 9f       	mul	r25, r21
 880:	d1 f3       	breq	.-12     	; 0x876 <__mulsf3+0x14>
 882:	95 0f       	add	r25, r21
 884:	50 e0       	ldi	r21, 0x00	; 0
 886:	55 1f       	adc	r21, r21
 888:	62 9f       	mul	r22, r18
 88a:	f0 01       	movw	r30, r0
 88c:	72 9f       	mul	r23, r18
 88e:	bb 27       	eor	r27, r27
 890:	f0 0d       	add	r31, r0
 892:	b1 1d       	adc	r27, r1
 894:	63 9f       	mul	r22, r19
 896:	aa 27       	eor	r26, r26
 898:	f0 0d       	add	r31, r0
 89a:	b1 1d       	adc	r27, r1
 89c:	aa 1f       	adc	r26, r26
 89e:	64 9f       	mul	r22, r20
 8a0:	66 27       	eor	r22, r22
 8a2:	b0 0d       	add	r27, r0
 8a4:	a1 1d       	adc	r26, r1
 8a6:	66 1f       	adc	r22, r22
 8a8:	82 9f       	mul	r24, r18
 8aa:	22 27       	eor	r18, r18
 8ac:	b0 0d       	add	r27, r0
 8ae:	a1 1d       	adc	r26, r1
 8b0:	62 1f       	adc	r22, r18
 8b2:	73 9f       	mul	r23, r19
 8b4:	b0 0d       	add	r27, r0
 8b6:	a1 1d       	adc	r26, r1
 8b8:	62 1f       	adc	r22, r18
 8ba:	83 9f       	mul	r24, r19
 8bc:	a0 0d       	add	r26, r0
 8be:	61 1d       	adc	r22, r1
 8c0:	22 1f       	adc	r18, r18
 8c2:	74 9f       	mul	r23, r20
 8c4:	33 27       	eor	r19, r19
 8c6:	a0 0d       	add	r26, r0
 8c8:	61 1d       	adc	r22, r1
 8ca:	23 1f       	adc	r18, r19
 8cc:	84 9f       	mul	r24, r20
 8ce:	60 0d       	add	r22, r0
 8d0:	21 1d       	adc	r18, r1
 8d2:	82 2f       	mov	r24, r18
 8d4:	76 2f       	mov	r23, r22
 8d6:	6a 2f       	mov	r22, r26
 8d8:	11 24       	eor	r1, r1
 8da:	9f 57       	subi	r25, 0x7F	; 127
 8dc:	50 40       	sbci	r21, 0x00	; 0
 8de:	8a f0       	brmi	.+34     	; 0x902 <__mulsf3_pse+0x84>
 8e0:	e1 f0       	breq	.+56     	; 0x91a <__mulsf3_pse+0x9c>
 8e2:	88 23       	and	r24, r24
 8e4:	4a f0       	brmi	.+18     	; 0x8f8 <__mulsf3_pse+0x7a>
 8e6:	ee 0f       	add	r30, r30
 8e8:	ff 1f       	adc	r31, r31
 8ea:	bb 1f       	adc	r27, r27
 8ec:	66 1f       	adc	r22, r22
 8ee:	77 1f       	adc	r23, r23
 8f0:	88 1f       	adc	r24, r24
 8f2:	91 50       	subi	r25, 0x01	; 1
 8f4:	50 40       	sbci	r21, 0x00	; 0
 8f6:	a9 f7       	brne	.-22     	; 0x8e2 <__mulsf3_pse+0x64>
 8f8:	9e 3f       	cpi	r25, 0xFE	; 254
 8fa:	51 05       	cpc	r21, r1
 8fc:	70 f0       	brcs	.+28     	; 0x91a <__mulsf3_pse+0x9c>
 8fe:	60 cf       	rjmp	.-320    	; 0x7c0 <__fp_inf>
 900:	aa cf       	rjmp	.-172    	; 0x856 <__fp_szero>
 902:	5f 3f       	cpi	r21, 0xFF	; 255
 904:	ec f3       	brlt	.-6      	; 0x900 <__mulsf3_pse+0x82>
 906:	98 3e       	cpi	r25, 0xE8	; 232
 908:	dc f3       	brlt	.-10     	; 0x900 <__mulsf3_pse+0x82>
 90a:	86 95       	lsr	r24
 90c:	77 95       	ror	r23
 90e:	67 95       	ror	r22
 910:	b7 95       	ror	r27
 912:	f7 95       	ror	r31
 914:	e7 95       	ror	r30
 916:	9f 5f       	subi	r25, 0xFF	; 255
 918:	c1 f7       	brne	.-16     	; 0x90a <__mulsf3_pse+0x8c>
 91a:	fe 2b       	or	r31, r30
 91c:	88 0f       	add	r24, r24
 91e:	91 1d       	adc	r25, r1
 920:	96 95       	lsr	r25
 922:	87 95       	ror	r24
 924:	97 f9       	bld	r25, 7
 926:	08 95       	ret

00000928 <__divmodhi4>:
 928:	97 fb       	bst	r25, 7
 92a:	07 2e       	mov	r0, r23
 92c:	16 f4       	brtc	.+4      	; 0x932 <__divmodhi4+0xa>
 92e:	00 94       	com	r0
 930:	06 d0       	rcall	.+12     	; 0x93e <__divmodhi4_neg1>
 932:	77 fd       	sbrc	r23, 7
 934:	08 d0       	rcall	.+16     	; 0x946 <__divmodhi4_neg2>
 936:	0b d0       	rcall	.+22     	; 0x94e <__udivmodhi4>
 938:	07 fc       	sbrc	r0, 7
 93a:	05 d0       	rcall	.+10     	; 0x946 <__divmodhi4_neg2>
 93c:	3e f4       	brtc	.+14     	; 0x94c <__divmodhi4_exit>

0000093e <__divmodhi4_neg1>:
 93e:	90 95       	com	r25
 940:	81 95       	neg	r24
 942:	9f 4f       	sbci	r25, 0xFF	; 255
 944:	08 95       	ret

00000946 <__divmodhi4_neg2>:
 946:	70 95       	com	r23
 948:	61 95       	neg	r22
 94a:	7f 4f       	sbci	r23, 0xFF	; 255

0000094c <__divmodhi4_exit>:
 94c:	08 95       	ret

0000094e <__udivmodhi4>:
 94e:	aa 1b       	sub	r26, r26
 950:	bb 1b       	sub	r27, r27
 952:	51 e1       	ldi	r21, 0x11	; 17
 954:	07 c0       	rjmp	.+14     	; 0x964 <__udivmodhi4_ep>

00000956 <__udivmodhi4_loop>:
 956:	aa 1f       	adc	r26, r26
 958:	bb 1f       	adc	r27, r27
 95a:	a6 17       	cp	r26, r22
 95c:	b7 07       	cpc	r27, r23
 95e:	10 f0       	brcs	.+4      	; 0x964 <__udivmodhi4_ep>
 960:	a6 1b       	sub	r26, r22
 962:	b7 0b       	sbc	r27, r23

00000964 <__udivmodhi4_ep>:
 964:	88 1f       	adc	r24, r24
 966:	99 1f       	adc	r25, r25
 968:	5a 95       	dec	r21
 96a:	a9 f7       	brne	.-22     	; 0x956 <__udivmodhi4_loop>
 96c:	80 95       	com	r24
 96e:	90 95       	com	r25
 970:	bc 01       	movw	r22, r24
 972:	cd 01       	movw	r24, r26
 974:	08 95       	ret

00000976 <sprintf>:
 976:	0f 93       	push	r16
 978:	1f 93       	push	r17
 97a:	cf 93       	push	r28
 97c:	df 93       	push	r29
 97e:	cd b7       	in	r28, 0x3d	; 61
 980:	de b7       	in	r29, 0x3e	; 62
 982:	2e 97       	sbiw	r28, 0x0e	; 14
 984:	0f b6       	in	r0, 0x3f	; 63
 986:	f8 94       	cli
 988:	de bf       	out	0x3e, r29	; 62
 98a:	0f be       	out	0x3f, r0	; 63
 98c:	cd bf       	out	0x3d, r28	; 61
 98e:	0d 89       	ldd	r16, Y+21	; 0x15
 990:	1e 89       	ldd	r17, Y+22	; 0x16
 992:	86 e0       	ldi	r24, 0x06	; 6
 994:	8c 83       	std	Y+4, r24	; 0x04
 996:	1a 83       	std	Y+2, r17	; 0x02
 998:	09 83       	std	Y+1, r16	; 0x01
 99a:	8f ef       	ldi	r24, 0xFF	; 255
 99c:	9f e7       	ldi	r25, 0x7F	; 127
 99e:	9e 83       	std	Y+6, r25	; 0x06
 9a0:	8d 83       	std	Y+5, r24	; 0x05
 9a2:	ae 01       	movw	r20, r28
 9a4:	47 5e       	subi	r20, 0xE7	; 231
 9a6:	5f 4f       	sbci	r21, 0xFF	; 255
 9a8:	6f 89       	ldd	r22, Y+23	; 0x17
 9aa:	78 8d       	ldd	r23, Y+24	; 0x18
 9ac:	ce 01       	movw	r24, r28
 9ae:	01 96       	adiw	r24, 0x01	; 1
 9b0:	10 d0       	rcall	.+32     	; 0x9d2 <vfprintf>
 9b2:	ef 81       	ldd	r30, Y+7	; 0x07
 9b4:	f8 85       	ldd	r31, Y+8	; 0x08
 9b6:	e0 0f       	add	r30, r16
 9b8:	f1 1f       	adc	r31, r17
 9ba:	10 82       	st	Z, r1
 9bc:	2e 96       	adiw	r28, 0x0e	; 14
 9be:	0f b6       	in	r0, 0x3f	; 63
 9c0:	f8 94       	cli
 9c2:	de bf       	out	0x3e, r29	; 62
 9c4:	0f be       	out	0x3f, r0	; 63
 9c6:	cd bf       	out	0x3d, r28	; 61
 9c8:	df 91       	pop	r29
 9ca:	cf 91       	pop	r28
 9cc:	1f 91       	pop	r17
 9ce:	0f 91       	pop	r16
 9d0:	08 95       	ret

000009d2 <vfprintf>:
 9d2:	2f 92       	push	r2
 9d4:	3f 92       	push	r3
 9d6:	4f 92       	push	r4
 9d8:	5f 92       	push	r5
 9da:	6f 92       	push	r6
 9dc:	7f 92       	push	r7
 9de:	8f 92       	push	r8
 9e0:	9f 92       	push	r9
 9e2:	af 92       	push	r10
 9e4:	bf 92       	push	r11
 9e6:	cf 92       	push	r12
 9e8:	df 92       	push	r13
 9ea:	ef 92       	push	r14
 9ec:	ff 92       	push	r15
 9ee:	0f 93       	push	r16
 9f0:	1f 93       	push	r17
 9f2:	cf 93       	push	r28
 9f4:	df 93       	push	r29
 9f6:	cd b7       	in	r28, 0x3d	; 61
 9f8:	de b7       	in	r29, 0x3e	; 62
 9fa:	2b 97       	sbiw	r28, 0x0b	; 11
 9fc:	0f b6       	in	r0, 0x3f	; 63
 9fe:	f8 94       	cli
 a00:	de bf       	out	0x3e, r29	; 62
 a02:	0f be       	out	0x3f, r0	; 63
 a04:	cd bf       	out	0x3d, r28	; 61
 a06:	6c 01       	movw	r12, r24
 a08:	7b 01       	movw	r14, r22
 a0a:	8a 01       	movw	r16, r20
 a0c:	fc 01       	movw	r30, r24
 a0e:	17 82       	std	Z+7, r1	; 0x07
 a10:	16 82       	std	Z+6, r1	; 0x06
 a12:	83 81       	ldd	r24, Z+3	; 0x03
 a14:	81 ff       	sbrs	r24, 1
 a16:	bf c1       	rjmp	.+894    	; 0xd96 <vfprintf+0x3c4>
 a18:	ce 01       	movw	r24, r28
 a1a:	01 96       	adiw	r24, 0x01	; 1
 a1c:	3c 01       	movw	r6, r24
 a1e:	f6 01       	movw	r30, r12
 a20:	93 81       	ldd	r25, Z+3	; 0x03
 a22:	f7 01       	movw	r30, r14
 a24:	93 fd       	sbrc	r25, 3
 a26:	85 91       	lpm	r24, Z+
 a28:	93 ff       	sbrs	r25, 3
 a2a:	81 91       	ld	r24, Z+
 a2c:	7f 01       	movw	r14, r30
 a2e:	88 23       	and	r24, r24
 a30:	09 f4       	brne	.+2      	; 0xa34 <vfprintf+0x62>
 a32:	ad c1       	rjmp	.+858    	; 0xd8e <vfprintf+0x3bc>
 a34:	85 32       	cpi	r24, 0x25	; 37
 a36:	39 f4       	brne	.+14     	; 0xa46 <vfprintf+0x74>
 a38:	93 fd       	sbrc	r25, 3
 a3a:	85 91       	lpm	r24, Z+
 a3c:	93 ff       	sbrs	r25, 3
 a3e:	81 91       	ld	r24, Z+
 a40:	7f 01       	movw	r14, r30
 a42:	85 32       	cpi	r24, 0x25	; 37
 a44:	21 f4       	brne	.+8      	; 0xa4e <vfprintf+0x7c>
 a46:	b6 01       	movw	r22, r12
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	d6 d1       	rcall	.+940    	; 0xdf8 <fputc>
 a4c:	e8 cf       	rjmp	.-48     	; 0xa1e <vfprintf+0x4c>
 a4e:	91 2c       	mov	r9, r1
 a50:	21 2c       	mov	r2, r1
 a52:	31 2c       	mov	r3, r1
 a54:	ff e1       	ldi	r31, 0x1F	; 31
 a56:	f3 15       	cp	r31, r3
 a58:	d8 f0       	brcs	.+54     	; 0xa90 <vfprintf+0xbe>
 a5a:	8b 32       	cpi	r24, 0x2B	; 43
 a5c:	79 f0       	breq	.+30     	; 0xa7c <vfprintf+0xaa>
 a5e:	38 f4       	brcc	.+14     	; 0xa6e <vfprintf+0x9c>
 a60:	80 32       	cpi	r24, 0x20	; 32
 a62:	79 f0       	breq	.+30     	; 0xa82 <vfprintf+0xb0>
 a64:	83 32       	cpi	r24, 0x23	; 35
 a66:	a1 f4       	brne	.+40     	; 0xa90 <vfprintf+0xbe>
 a68:	23 2d       	mov	r18, r3
 a6a:	20 61       	ori	r18, 0x10	; 16
 a6c:	1d c0       	rjmp	.+58     	; 0xaa8 <vfprintf+0xd6>
 a6e:	8d 32       	cpi	r24, 0x2D	; 45
 a70:	61 f0       	breq	.+24     	; 0xa8a <vfprintf+0xb8>
 a72:	80 33       	cpi	r24, 0x30	; 48
 a74:	69 f4       	brne	.+26     	; 0xa90 <vfprintf+0xbe>
 a76:	23 2d       	mov	r18, r3
 a78:	21 60       	ori	r18, 0x01	; 1
 a7a:	16 c0       	rjmp	.+44     	; 0xaa8 <vfprintf+0xd6>
 a7c:	83 2d       	mov	r24, r3
 a7e:	82 60       	ori	r24, 0x02	; 2
 a80:	38 2e       	mov	r3, r24
 a82:	e3 2d       	mov	r30, r3
 a84:	e4 60       	ori	r30, 0x04	; 4
 a86:	3e 2e       	mov	r3, r30
 a88:	2a c0       	rjmp	.+84     	; 0xade <vfprintf+0x10c>
 a8a:	f3 2d       	mov	r31, r3
 a8c:	f8 60       	ori	r31, 0x08	; 8
 a8e:	1d c0       	rjmp	.+58     	; 0xaca <vfprintf+0xf8>
 a90:	37 fc       	sbrc	r3, 7
 a92:	2d c0       	rjmp	.+90     	; 0xaee <vfprintf+0x11c>
 a94:	20 ed       	ldi	r18, 0xD0	; 208
 a96:	28 0f       	add	r18, r24
 a98:	2a 30       	cpi	r18, 0x0A	; 10
 a9a:	40 f0       	brcs	.+16     	; 0xaac <vfprintf+0xda>
 a9c:	8e 32       	cpi	r24, 0x2E	; 46
 a9e:	b9 f4       	brne	.+46     	; 0xace <vfprintf+0xfc>
 aa0:	36 fc       	sbrc	r3, 6
 aa2:	75 c1       	rjmp	.+746    	; 0xd8e <vfprintf+0x3bc>
 aa4:	23 2d       	mov	r18, r3
 aa6:	20 64       	ori	r18, 0x40	; 64
 aa8:	32 2e       	mov	r3, r18
 aaa:	19 c0       	rjmp	.+50     	; 0xade <vfprintf+0x10c>
 aac:	36 fe       	sbrs	r3, 6
 aae:	06 c0       	rjmp	.+12     	; 0xabc <vfprintf+0xea>
 ab0:	8a e0       	ldi	r24, 0x0A	; 10
 ab2:	98 9e       	mul	r9, r24
 ab4:	20 0d       	add	r18, r0
 ab6:	11 24       	eor	r1, r1
 ab8:	92 2e       	mov	r9, r18
 aba:	11 c0       	rjmp	.+34     	; 0xade <vfprintf+0x10c>
 abc:	ea e0       	ldi	r30, 0x0A	; 10
 abe:	2e 9e       	mul	r2, r30
 ac0:	20 0d       	add	r18, r0
 ac2:	11 24       	eor	r1, r1
 ac4:	22 2e       	mov	r2, r18
 ac6:	f3 2d       	mov	r31, r3
 ac8:	f0 62       	ori	r31, 0x20	; 32
 aca:	3f 2e       	mov	r3, r31
 acc:	08 c0       	rjmp	.+16     	; 0xade <vfprintf+0x10c>
 ace:	8c 36       	cpi	r24, 0x6C	; 108
 ad0:	21 f4       	brne	.+8      	; 0xada <vfprintf+0x108>
 ad2:	83 2d       	mov	r24, r3
 ad4:	80 68       	ori	r24, 0x80	; 128
 ad6:	38 2e       	mov	r3, r24
 ad8:	02 c0       	rjmp	.+4      	; 0xade <vfprintf+0x10c>
 ada:	88 36       	cpi	r24, 0x68	; 104
 adc:	41 f4       	brne	.+16     	; 0xaee <vfprintf+0x11c>
 ade:	f7 01       	movw	r30, r14
 ae0:	93 fd       	sbrc	r25, 3
 ae2:	85 91       	lpm	r24, Z+
 ae4:	93 ff       	sbrs	r25, 3
 ae6:	81 91       	ld	r24, Z+
 ae8:	7f 01       	movw	r14, r30
 aea:	81 11       	cpse	r24, r1
 aec:	b3 cf       	rjmp	.-154    	; 0xa54 <vfprintf+0x82>
 aee:	98 2f       	mov	r25, r24
 af0:	9f 7d       	andi	r25, 0xDF	; 223
 af2:	95 54       	subi	r25, 0x45	; 69
 af4:	93 30       	cpi	r25, 0x03	; 3
 af6:	28 f4       	brcc	.+10     	; 0xb02 <vfprintf+0x130>
 af8:	0c 5f       	subi	r16, 0xFC	; 252
 afa:	1f 4f       	sbci	r17, 0xFF	; 255
 afc:	9f e3       	ldi	r25, 0x3F	; 63
 afe:	99 83       	std	Y+1, r25	; 0x01
 b00:	0d c0       	rjmp	.+26     	; 0xb1c <vfprintf+0x14a>
 b02:	83 36       	cpi	r24, 0x63	; 99
 b04:	31 f0       	breq	.+12     	; 0xb12 <vfprintf+0x140>
 b06:	83 37       	cpi	r24, 0x73	; 115
 b08:	71 f0       	breq	.+28     	; 0xb26 <vfprintf+0x154>
 b0a:	83 35       	cpi	r24, 0x53	; 83
 b0c:	09 f0       	breq	.+2      	; 0xb10 <vfprintf+0x13e>
 b0e:	55 c0       	rjmp	.+170    	; 0xbba <vfprintf+0x1e8>
 b10:	20 c0       	rjmp	.+64     	; 0xb52 <vfprintf+0x180>
 b12:	f8 01       	movw	r30, r16
 b14:	80 81       	ld	r24, Z
 b16:	89 83       	std	Y+1, r24	; 0x01
 b18:	0e 5f       	subi	r16, 0xFE	; 254
 b1a:	1f 4f       	sbci	r17, 0xFF	; 255
 b1c:	88 24       	eor	r8, r8
 b1e:	83 94       	inc	r8
 b20:	91 2c       	mov	r9, r1
 b22:	53 01       	movw	r10, r6
 b24:	12 c0       	rjmp	.+36     	; 0xb4a <vfprintf+0x178>
 b26:	28 01       	movw	r4, r16
 b28:	f2 e0       	ldi	r31, 0x02	; 2
 b2a:	4f 0e       	add	r4, r31
 b2c:	51 1c       	adc	r5, r1
 b2e:	f8 01       	movw	r30, r16
 b30:	a0 80       	ld	r10, Z
 b32:	b1 80       	ldd	r11, Z+1	; 0x01
 b34:	36 fe       	sbrs	r3, 6
 b36:	03 c0       	rjmp	.+6      	; 0xb3e <vfprintf+0x16c>
 b38:	69 2d       	mov	r22, r9
 b3a:	70 e0       	ldi	r23, 0x00	; 0
 b3c:	02 c0       	rjmp	.+4      	; 0xb42 <vfprintf+0x170>
 b3e:	6f ef       	ldi	r22, 0xFF	; 255
 b40:	7f ef       	ldi	r23, 0xFF	; 255
 b42:	c5 01       	movw	r24, r10
 b44:	4e d1       	rcall	.+668    	; 0xde2 <strnlen>
 b46:	4c 01       	movw	r8, r24
 b48:	82 01       	movw	r16, r4
 b4a:	f3 2d       	mov	r31, r3
 b4c:	ff 77       	andi	r31, 0x7F	; 127
 b4e:	3f 2e       	mov	r3, r31
 b50:	15 c0       	rjmp	.+42     	; 0xb7c <vfprintf+0x1aa>
 b52:	28 01       	movw	r4, r16
 b54:	22 e0       	ldi	r18, 0x02	; 2
 b56:	42 0e       	add	r4, r18
 b58:	51 1c       	adc	r5, r1
 b5a:	f8 01       	movw	r30, r16
 b5c:	a0 80       	ld	r10, Z
 b5e:	b1 80       	ldd	r11, Z+1	; 0x01
 b60:	36 fe       	sbrs	r3, 6
 b62:	03 c0       	rjmp	.+6      	; 0xb6a <vfprintf+0x198>
 b64:	69 2d       	mov	r22, r9
 b66:	70 e0       	ldi	r23, 0x00	; 0
 b68:	02 c0       	rjmp	.+4      	; 0xb6e <vfprintf+0x19c>
 b6a:	6f ef       	ldi	r22, 0xFF	; 255
 b6c:	7f ef       	ldi	r23, 0xFF	; 255
 b6e:	c5 01       	movw	r24, r10
 b70:	2d d1       	rcall	.+602    	; 0xdcc <strnlen_P>
 b72:	4c 01       	movw	r8, r24
 b74:	f3 2d       	mov	r31, r3
 b76:	f0 68       	ori	r31, 0x80	; 128
 b78:	3f 2e       	mov	r3, r31
 b7a:	82 01       	movw	r16, r4
 b7c:	33 fc       	sbrc	r3, 3
 b7e:	19 c0       	rjmp	.+50     	; 0xbb2 <vfprintf+0x1e0>
 b80:	82 2d       	mov	r24, r2
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	88 16       	cp	r8, r24
 b86:	99 06       	cpc	r9, r25
 b88:	a0 f4       	brcc	.+40     	; 0xbb2 <vfprintf+0x1e0>
 b8a:	b6 01       	movw	r22, r12
 b8c:	80 e2       	ldi	r24, 0x20	; 32
 b8e:	90 e0       	ldi	r25, 0x00	; 0
 b90:	33 d1       	rcall	.+614    	; 0xdf8 <fputc>
 b92:	2a 94       	dec	r2
 b94:	f5 cf       	rjmp	.-22     	; 0xb80 <vfprintf+0x1ae>
 b96:	f5 01       	movw	r30, r10
 b98:	37 fc       	sbrc	r3, 7
 b9a:	85 91       	lpm	r24, Z+
 b9c:	37 fe       	sbrs	r3, 7
 b9e:	81 91       	ld	r24, Z+
 ba0:	5f 01       	movw	r10, r30
 ba2:	b6 01       	movw	r22, r12
 ba4:	90 e0       	ldi	r25, 0x00	; 0
 ba6:	28 d1       	rcall	.+592    	; 0xdf8 <fputc>
 ba8:	21 10       	cpse	r2, r1
 baa:	2a 94       	dec	r2
 bac:	21 e0       	ldi	r18, 0x01	; 1
 bae:	82 1a       	sub	r8, r18
 bb0:	91 08       	sbc	r9, r1
 bb2:	81 14       	cp	r8, r1
 bb4:	91 04       	cpc	r9, r1
 bb6:	79 f7       	brne	.-34     	; 0xb96 <vfprintf+0x1c4>
 bb8:	e1 c0       	rjmp	.+450    	; 0xd7c <vfprintf+0x3aa>
 bba:	84 36       	cpi	r24, 0x64	; 100
 bbc:	11 f0       	breq	.+4      	; 0xbc2 <vfprintf+0x1f0>
 bbe:	89 36       	cpi	r24, 0x69	; 105
 bc0:	39 f5       	brne	.+78     	; 0xc10 <vfprintf+0x23e>
 bc2:	f8 01       	movw	r30, r16
 bc4:	37 fe       	sbrs	r3, 7
 bc6:	07 c0       	rjmp	.+14     	; 0xbd6 <vfprintf+0x204>
 bc8:	60 81       	ld	r22, Z
 bca:	71 81       	ldd	r23, Z+1	; 0x01
 bcc:	82 81       	ldd	r24, Z+2	; 0x02
 bce:	93 81       	ldd	r25, Z+3	; 0x03
 bd0:	0c 5f       	subi	r16, 0xFC	; 252
 bd2:	1f 4f       	sbci	r17, 0xFF	; 255
 bd4:	08 c0       	rjmp	.+16     	; 0xbe6 <vfprintf+0x214>
 bd6:	60 81       	ld	r22, Z
 bd8:	71 81       	ldd	r23, Z+1	; 0x01
 bda:	07 2e       	mov	r0, r23
 bdc:	00 0c       	add	r0, r0
 bde:	88 0b       	sbc	r24, r24
 be0:	99 0b       	sbc	r25, r25
 be2:	0e 5f       	subi	r16, 0xFE	; 254
 be4:	1f 4f       	sbci	r17, 0xFF	; 255
 be6:	f3 2d       	mov	r31, r3
 be8:	ff 76       	andi	r31, 0x6F	; 111
 bea:	3f 2e       	mov	r3, r31
 bec:	97 ff       	sbrs	r25, 7
 bee:	09 c0       	rjmp	.+18     	; 0xc02 <vfprintf+0x230>
 bf0:	90 95       	com	r25
 bf2:	80 95       	com	r24
 bf4:	70 95       	com	r23
 bf6:	61 95       	neg	r22
 bf8:	7f 4f       	sbci	r23, 0xFF	; 255
 bfa:	8f 4f       	sbci	r24, 0xFF	; 255
 bfc:	9f 4f       	sbci	r25, 0xFF	; 255
 bfe:	f0 68       	ori	r31, 0x80	; 128
 c00:	3f 2e       	mov	r3, r31
 c02:	2a e0       	ldi	r18, 0x0A	; 10
 c04:	30 e0       	ldi	r19, 0x00	; 0
 c06:	a3 01       	movw	r20, r6
 c08:	33 d1       	rcall	.+614    	; 0xe70 <__ultoa_invert>
 c0a:	88 2e       	mov	r8, r24
 c0c:	86 18       	sub	r8, r6
 c0e:	44 c0       	rjmp	.+136    	; 0xc98 <vfprintf+0x2c6>
 c10:	85 37       	cpi	r24, 0x75	; 117
 c12:	31 f4       	brne	.+12     	; 0xc20 <vfprintf+0x24e>
 c14:	23 2d       	mov	r18, r3
 c16:	2f 7e       	andi	r18, 0xEF	; 239
 c18:	b2 2e       	mov	r11, r18
 c1a:	2a e0       	ldi	r18, 0x0A	; 10
 c1c:	30 e0       	ldi	r19, 0x00	; 0
 c1e:	25 c0       	rjmp	.+74     	; 0xc6a <vfprintf+0x298>
 c20:	93 2d       	mov	r25, r3
 c22:	99 7f       	andi	r25, 0xF9	; 249
 c24:	b9 2e       	mov	r11, r25
 c26:	8f 36       	cpi	r24, 0x6F	; 111
 c28:	c1 f0       	breq	.+48     	; 0xc5a <vfprintf+0x288>
 c2a:	18 f4       	brcc	.+6      	; 0xc32 <vfprintf+0x260>
 c2c:	88 35       	cpi	r24, 0x58	; 88
 c2e:	79 f0       	breq	.+30     	; 0xc4e <vfprintf+0x27c>
 c30:	ae c0       	rjmp	.+348    	; 0xd8e <vfprintf+0x3bc>
 c32:	80 37       	cpi	r24, 0x70	; 112
 c34:	19 f0       	breq	.+6      	; 0xc3c <vfprintf+0x26a>
 c36:	88 37       	cpi	r24, 0x78	; 120
 c38:	21 f0       	breq	.+8      	; 0xc42 <vfprintf+0x270>
 c3a:	a9 c0       	rjmp	.+338    	; 0xd8e <vfprintf+0x3bc>
 c3c:	e9 2f       	mov	r30, r25
 c3e:	e0 61       	ori	r30, 0x10	; 16
 c40:	be 2e       	mov	r11, r30
 c42:	b4 fe       	sbrs	r11, 4
 c44:	0d c0       	rjmp	.+26     	; 0xc60 <vfprintf+0x28e>
 c46:	fb 2d       	mov	r31, r11
 c48:	f4 60       	ori	r31, 0x04	; 4
 c4a:	bf 2e       	mov	r11, r31
 c4c:	09 c0       	rjmp	.+18     	; 0xc60 <vfprintf+0x28e>
 c4e:	34 fe       	sbrs	r3, 4
 c50:	0a c0       	rjmp	.+20     	; 0xc66 <vfprintf+0x294>
 c52:	29 2f       	mov	r18, r25
 c54:	26 60       	ori	r18, 0x06	; 6
 c56:	b2 2e       	mov	r11, r18
 c58:	06 c0       	rjmp	.+12     	; 0xc66 <vfprintf+0x294>
 c5a:	28 e0       	ldi	r18, 0x08	; 8
 c5c:	30 e0       	ldi	r19, 0x00	; 0
 c5e:	05 c0       	rjmp	.+10     	; 0xc6a <vfprintf+0x298>
 c60:	20 e1       	ldi	r18, 0x10	; 16
 c62:	30 e0       	ldi	r19, 0x00	; 0
 c64:	02 c0       	rjmp	.+4      	; 0xc6a <vfprintf+0x298>
 c66:	20 e1       	ldi	r18, 0x10	; 16
 c68:	32 e0       	ldi	r19, 0x02	; 2
 c6a:	f8 01       	movw	r30, r16
 c6c:	b7 fe       	sbrs	r11, 7
 c6e:	07 c0       	rjmp	.+14     	; 0xc7e <vfprintf+0x2ac>
 c70:	60 81       	ld	r22, Z
 c72:	71 81       	ldd	r23, Z+1	; 0x01
 c74:	82 81       	ldd	r24, Z+2	; 0x02
 c76:	93 81       	ldd	r25, Z+3	; 0x03
 c78:	0c 5f       	subi	r16, 0xFC	; 252
 c7a:	1f 4f       	sbci	r17, 0xFF	; 255
 c7c:	06 c0       	rjmp	.+12     	; 0xc8a <vfprintf+0x2b8>
 c7e:	60 81       	ld	r22, Z
 c80:	71 81       	ldd	r23, Z+1	; 0x01
 c82:	80 e0       	ldi	r24, 0x00	; 0
 c84:	90 e0       	ldi	r25, 0x00	; 0
 c86:	0e 5f       	subi	r16, 0xFE	; 254
 c88:	1f 4f       	sbci	r17, 0xFF	; 255
 c8a:	a3 01       	movw	r20, r6
 c8c:	f1 d0       	rcall	.+482    	; 0xe70 <__ultoa_invert>
 c8e:	88 2e       	mov	r8, r24
 c90:	86 18       	sub	r8, r6
 c92:	fb 2d       	mov	r31, r11
 c94:	ff 77       	andi	r31, 0x7F	; 127
 c96:	3f 2e       	mov	r3, r31
 c98:	36 fe       	sbrs	r3, 6
 c9a:	0d c0       	rjmp	.+26     	; 0xcb6 <vfprintf+0x2e4>
 c9c:	23 2d       	mov	r18, r3
 c9e:	2e 7f       	andi	r18, 0xFE	; 254
 ca0:	a2 2e       	mov	r10, r18
 ca2:	89 14       	cp	r8, r9
 ca4:	58 f4       	brcc	.+22     	; 0xcbc <vfprintf+0x2ea>
 ca6:	34 fe       	sbrs	r3, 4
 ca8:	0b c0       	rjmp	.+22     	; 0xcc0 <vfprintf+0x2ee>
 caa:	32 fc       	sbrc	r3, 2
 cac:	09 c0       	rjmp	.+18     	; 0xcc0 <vfprintf+0x2ee>
 cae:	83 2d       	mov	r24, r3
 cb0:	8e 7e       	andi	r24, 0xEE	; 238
 cb2:	a8 2e       	mov	r10, r24
 cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <vfprintf+0x2ee>
 cb6:	b8 2c       	mov	r11, r8
 cb8:	a3 2c       	mov	r10, r3
 cba:	03 c0       	rjmp	.+6      	; 0xcc2 <vfprintf+0x2f0>
 cbc:	b8 2c       	mov	r11, r8
 cbe:	01 c0       	rjmp	.+2      	; 0xcc2 <vfprintf+0x2f0>
 cc0:	b9 2c       	mov	r11, r9
 cc2:	a4 fe       	sbrs	r10, 4
 cc4:	0f c0       	rjmp	.+30     	; 0xce4 <vfprintf+0x312>
 cc6:	fe 01       	movw	r30, r28
 cc8:	e8 0d       	add	r30, r8
 cca:	f1 1d       	adc	r31, r1
 ccc:	80 81       	ld	r24, Z
 cce:	80 33       	cpi	r24, 0x30	; 48
 cd0:	21 f4       	brne	.+8      	; 0xcda <vfprintf+0x308>
 cd2:	9a 2d       	mov	r25, r10
 cd4:	99 7e       	andi	r25, 0xE9	; 233
 cd6:	a9 2e       	mov	r10, r25
 cd8:	09 c0       	rjmp	.+18     	; 0xcec <vfprintf+0x31a>
 cda:	a2 fe       	sbrs	r10, 2
 cdc:	06 c0       	rjmp	.+12     	; 0xcea <vfprintf+0x318>
 cde:	b3 94       	inc	r11
 ce0:	b3 94       	inc	r11
 ce2:	04 c0       	rjmp	.+8      	; 0xcec <vfprintf+0x31a>
 ce4:	8a 2d       	mov	r24, r10
 ce6:	86 78       	andi	r24, 0x86	; 134
 ce8:	09 f0       	breq	.+2      	; 0xcec <vfprintf+0x31a>
 cea:	b3 94       	inc	r11
 cec:	a3 fc       	sbrc	r10, 3
 cee:	10 c0       	rjmp	.+32     	; 0xd10 <vfprintf+0x33e>
 cf0:	a0 fe       	sbrs	r10, 0
 cf2:	06 c0       	rjmp	.+12     	; 0xd00 <vfprintf+0x32e>
 cf4:	b2 14       	cp	r11, r2
 cf6:	80 f4       	brcc	.+32     	; 0xd18 <vfprintf+0x346>
 cf8:	28 0c       	add	r2, r8
 cfa:	92 2c       	mov	r9, r2
 cfc:	9b 18       	sub	r9, r11
 cfe:	0d c0       	rjmp	.+26     	; 0xd1a <vfprintf+0x348>
 d00:	b2 14       	cp	r11, r2
 d02:	58 f4       	brcc	.+22     	; 0xd1a <vfprintf+0x348>
 d04:	b6 01       	movw	r22, r12
 d06:	80 e2       	ldi	r24, 0x20	; 32
 d08:	90 e0       	ldi	r25, 0x00	; 0
 d0a:	76 d0       	rcall	.+236    	; 0xdf8 <fputc>
 d0c:	b3 94       	inc	r11
 d0e:	f8 cf       	rjmp	.-16     	; 0xd00 <vfprintf+0x32e>
 d10:	b2 14       	cp	r11, r2
 d12:	18 f4       	brcc	.+6      	; 0xd1a <vfprintf+0x348>
 d14:	2b 18       	sub	r2, r11
 d16:	02 c0       	rjmp	.+4      	; 0xd1c <vfprintf+0x34a>
 d18:	98 2c       	mov	r9, r8
 d1a:	21 2c       	mov	r2, r1
 d1c:	a4 fe       	sbrs	r10, 4
 d1e:	0f c0       	rjmp	.+30     	; 0xd3e <vfprintf+0x36c>
 d20:	b6 01       	movw	r22, r12
 d22:	80 e3       	ldi	r24, 0x30	; 48
 d24:	90 e0       	ldi	r25, 0x00	; 0
 d26:	68 d0       	rcall	.+208    	; 0xdf8 <fputc>
 d28:	a2 fe       	sbrs	r10, 2
 d2a:	16 c0       	rjmp	.+44     	; 0xd58 <vfprintf+0x386>
 d2c:	a1 fc       	sbrc	r10, 1
 d2e:	03 c0       	rjmp	.+6      	; 0xd36 <vfprintf+0x364>
 d30:	88 e7       	ldi	r24, 0x78	; 120
 d32:	90 e0       	ldi	r25, 0x00	; 0
 d34:	02 c0       	rjmp	.+4      	; 0xd3a <vfprintf+0x368>
 d36:	88 e5       	ldi	r24, 0x58	; 88
 d38:	90 e0       	ldi	r25, 0x00	; 0
 d3a:	b6 01       	movw	r22, r12
 d3c:	0c c0       	rjmp	.+24     	; 0xd56 <vfprintf+0x384>
 d3e:	8a 2d       	mov	r24, r10
 d40:	86 78       	andi	r24, 0x86	; 134
 d42:	51 f0       	breq	.+20     	; 0xd58 <vfprintf+0x386>
 d44:	a1 fe       	sbrs	r10, 1
 d46:	02 c0       	rjmp	.+4      	; 0xd4c <vfprintf+0x37a>
 d48:	8b e2       	ldi	r24, 0x2B	; 43
 d4a:	01 c0       	rjmp	.+2      	; 0xd4e <vfprintf+0x37c>
 d4c:	80 e2       	ldi	r24, 0x20	; 32
 d4e:	a7 fc       	sbrc	r10, 7
 d50:	8d e2       	ldi	r24, 0x2D	; 45
 d52:	b6 01       	movw	r22, r12
 d54:	90 e0       	ldi	r25, 0x00	; 0
 d56:	50 d0       	rcall	.+160    	; 0xdf8 <fputc>
 d58:	89 14       	cp	r8, r9
 d5a:	30 f4       	brcc	.+12     	; 0xd68 <vfprintf+0x396>
 d5c:	b6 01       	movw	r22, r12
 d5e:	80 e3       	ldi	r24, 0x30	; 48
 d60:	90 e0       	ldi	r25, 0x00	; 0
 d62:	4a d0       	rcall	.+148    	; 0xdf8 <fputc>
 d64:	9a 94       	dec	r9
 d66:	f8 cf       	rjmp	.-16     	; 0xd58 <vfprintf+0x386>
 d68:	8a 94       	dec	r8
 d6a:	f3 01       	movw	r30, r6
 d6c:	e8 0d       	add	r30, r8
 d6e:	f1 1d       	adc	r31, r1
 d70:	80 81       	ld	r24, Z
 d72:	b6 01       	movw	r22, r12
 d74:	90 e0       	ldi	r25, 0x00	; 0
 d76:	40 d0       	rcall	.+128    	; 0xdf8 <fputc>
 d78:	81 10       	cpse	r8, r1
 d7a:	f6 cf       	rjmp	.-20     	; 0xd68 <vfprintf+0x396>
 d7c:	22 20       	and	r2, r2
 d7e:	09 f4       	brne	.+2      	; 0xd82 <vfprintf+0x3b0>
 d80:	4e ce       	rjmp	.-868    	; 0xa1e <vfprintf+0x4c>
 d82:	b6 01       	movw	r22, r12
 d84:	80 e2       	ldi	r24, 0x20	; 32
 d86:	90 e0       	ldi	r25, 0x00	; 0
 d88:	37 d0       	rcall	.+110    	; 0xdf8 <fputc>
 d8a:	2a 94       	dec	r2
 d8c:	f7 cf       	rjmp	.-18     	; 0xd7c <vfprintf+0x3aa>
 d8e:	f6 01       	movw	r30, r12
 d90:	86 81       	ldd	r24, Z+6	; 0x06
 d92:	97 81       	ldd	r25, Z+7	; 0x07
 d94:	02 c0       	rjmp	.+4      	; 0xd9a <vfprintf+0x3c8>
 d96:	8f ef       	ldi	r24, 0xFF	; 255
 d98:	9f ef       	ldi	r25, 0xFF	; 255
 d9a:	2b 96       	adiw	r28, 0x0b	; 11
 d9c:	0f b6       	in	r0, 0x3f	; 63
 d9e:	f8 94       	cli
 da0:	de bf       	out	0x3e, r29	; 62
 da2:	0f be       	out	0x3f, r0	; 63
 da4:	cd bf       	out	0x3d, r28	; 61
 da6:	df 91       	pop	r29
 da8:	cf 91       	pop	r28
 daa:	1f 91       	pop	r17
 dac:	0f 91       	pop	r16
 dae:	ff 90       	pop	r15
 db0:	ef 90       	pop	r14
 db2:	df 90       	pop	r13
 db4:	cf 90       	pop	r12
 db6:	bf 90       	pop	r11
 db8:	af 90       	pop	r10
 dba:	9f 90       	pop	r9
 dbc:	8f 90       	pop	r8
 dbe:	7f 90       	pop	r7
 dc0:	6f 90       	pop	r6
 dc2:	5f 90       	pop	r5
 dc4:	4f 90       	pop	r4
 dc6:	3f 90       	pop	r3
 dc8:	2f 90       	pop	r2
 dca:	08 95       	ret

00000dcc <strnlen_P>:
 dcc:	fc 01       	movw	r30, r24
 dce:	05 90       	lpm	r0, Z+
 dd0:	61 50       	subi	r22, 0x01	; 1
 dd2:	70 40       	sbci	r23, 0x00	; 0
 dd4:	01 10       	cpse	r0, r1
 dd6:	d8 f7       	brcc	.-10     	; 0xdce <strnlen_P+0x2>
 dd8:	80 95       	com	r24
 dda:	90 95       	com	r25
 ddc:	8e 0f       	add	r24, r30
 dde:	9f 1f       	adc	r25, r31
 de0:	08 95       	ret

00000de2 <strnlen>:
 de2:	fc 01       	movw	r30, r24
 de4:	61 50       	subi	r22, 0x01	; 1
 de6:	70 40       	sbci	r23, 0x00	; 0
 de8:	01 90       	ld	r0, Z+
 dea:	01 10       	cpse	r0, r1
 dec:	d8 f7       	brcc	.-10     	; 0xde4 <strnlen+0x2>
 dee:	80 95       	com	r24
 df0:	90 95       	com	r25
 df2:	8e 0f       	add	r24, r30
 df4:	9f 1f       	adc	r25, r31
 df6:	08 95       	ret

00000df8 <fputc>:
 df8:	0f 93       	push	r16
 dfa:	1f 93       	push	r17
 dfc:	cf 93       	push	r28
 dfe:	df 93       	push	r29
 e00:	fb 01       	movw	r30, r22
 e02:	23 81       	ldd	r18, Z+3	; 0x03
 e04:	21 fd       	sbrc	r18, 1
 e06:	03 c0       	rjmp	.+6      	; 0xe0e <fputc+0x16>
 e08:	8f ef       	ldi	r24, 0xFF	; 255
 e0a:	9f ef       	ldi	r25, 0xFF	; 255
 e0c:	2c c0       	rjmp	.+88     	; 0xe66 <fputc+0x6e>
 e0e:	22 ff       	sbrs	r18, 2
 e10:	16 c0       	rjmp	.+44     	; 0xe3e <fputc+0x46>
 e12:	46 81       	ldd	r20, Z+6	; 0x06
 e14:	57 81       	ldd	r21, Z+7	; 0x07
 e16:	24 81       	ldd	r18, Z+4	; 0x04
 e18:	35 81       	ldd	r19, Z+5	; 0x05
 e1a:	42 17       	cp	r20, r18
 e1c:	53 07       	cpc	r21, r19
 e1e:	44 f4       	brge	.+16     	; 0xe30 <fputc+0x38>
 e20:	a0 81       	ld	r26, Z
 e22:	b1 81       	ldd	r27, Z+1	; 0x01
 e24:	9d 01       	movw	r18, r26
 e26:	2f 5f       	subi	r18, 0xFF	; 255
 e28:	3f 4f       	sbci	r19, 0xFF	; 255
 e2a:	31 83       	std	Z+1, r19	; 0x01
 e2c:	20 83       	st	Z, r18
 e2e:	8c 93       	st	X, r24
 e30:	26 81       	ldd	r18, Z+6	; 0x06
 e32:	37 81       	ldd	r19, Z+7	; 0x07
 e34:	2f 5f       	subi	r18, 0xFF	; 255
 e36:	3f 4f       	sbci	r19, 0xFF	; 255
 e38:	37 83       	std	Z+7, r19	; 0x07
 e3a:	26 83       	std	Z+6, r18	; 0x06
 e3c:	14 c0       	rjmp	.+40     	; 0xe66 <fputc+0x6e>
 e3e:	8b 01       	movw	r16, r22
 e40:	ec 01       	movw	r28, r24
 e42:	fb 01       	movw	r30, r22
 e44:	00 84       	ldd	r0, Z+8	; 0x08
 e46:	f1 85       	ldd	r31, Z+9	; 0x09
 e48:	e0 2d       	mov	r30, r0
 e4a:	09 95       	icall
 e4c:	89 2b       	or	r24, r25
 e4e:	e1 f6       	brne	.-72     	; 0xe08 <fputc+0x10>
 e50:	d8 01       	movw	r26, r16
 e52:	16 96       	adiw	r26, 0x06	; 6
 e54:	8d 91       	ld	r24, X+
 e56:	9c 91       	ld	r25, X
 e58:	17 97       	sbiw	r26, 0x07	; 7
 e5a:	01 96       	adiw	r24, 0x01	; 1
 e5c:	17 96       	adiw	r26, 0x07	; 7
 e5e:	9c 93       	st	X, r25
 e60:	8e 93       	st	-X, r24
 e62:	16 97       	sbiw	r26, 0x06	; 6
 e64:	ce 01       	movw	r24, r28
 e66:	df 91       	pop	r29
 e68:	cf 91       	pop	r28
 e6a:	1f 91       	pop	r17
 e6c:	0f 91       	pop	r16
 e6e:	08 95       	ret

00000e70 <__ultoa_invert>:
 e70:	fa 01       	movw	r30, r20
 e72:	aa 27       	eor	r26, r26
 e74:	28 30       	cpi	r18, 0x08	; 8
 e76:	51 f1       	breq	.+84     	; 0xecc <__ultoa_invert+0x5c>
 e78:	20 31       	cpi	r18, 0x10	; 16
 e7a:	81 f1       	breq	.+96     	; 0xedc <__ultoa_invert+0x6c>
 e7c:	e8 94       	clt
 e7e:	6f 93       	push	r22
 e80:	6e 7f       	andi	r22, 0xFE	; 254
 e82:	6e 5f       	subi	r22, 0xFE	; 254
 e84:	7f 4f       	sbci	r23, 0xFF	; 255
 e86:	8f 4f       	sbci	r24, 0xFF	; 255
 e88:	9f 4f       	sbci	r25, 0xFF	; 255
 e8a:	af 4f       	sbci	r26, 0xFF	; 255
 e8c:	b1 e0       	ldi	r27, 0x01	; 1
 e8e:	3e d0       	rcall	.+124    	; 0xf0c <__ultoa_invert+0x9c>
 e90:	b4 e0       	ldi	r27, 0x04	; 4
 e92:	3c d0       	rcall	.+120    	; 0xf0c <__ultoa_invert+0x9c>
 e94:	67 0f       	add	r22, r23
 e96:	78 1f       	adc	r23, r24
 e98:	89 1f       	adc	r24, r25
 e9a:	9a 1f       	adc	r25, r26
 e9c:	a1 1d       	adc	r26, r1
 e9e:	68 0f       	add	r22, r24
 ea0:	79 1f       	adc	r23, r25
 ea2:	8a 1f       	adc	r24, r26
 ea4:	91 1d       	adc	r25, r1
 ea6:	a1 1d       	adc	r26, r1
 ea8:	6a 0f       	add	r22, r26
 eaa:	71 1d       	adc	r23, r1
 eac:	81 1d       	adc	r24, r1
 eae:	91 1d       	adc	r25, r1
 eb0:	a1 1d       	adc	r26, r1
 eb2:	20 d0       	rcall	.+64     	; 0xef4 <__ultoa_invert+0x84>
 eb4:	09 f4       	brne	.+2      	; 0xeb8 <__ultoa_invert+0x48>
 eb6:	68 94       	set
 eb8:	3f 91       	pop	r19
 eba:	2a e0       	ldi	r18, 0x0A	; 10
 ebc:	26 9f       	mul	r18, r22
 ebe:	11 24       	eor	r1, r1
 ec0:	30 19       	sub	r19, r0
 ec2:	30 5d       	subi	r19, 0xD0	; 208
 ec4:	31 93       	st	Z+, r19
 ec6:	de f6       	brtc	.-74     	; 0xe7e <__ultoa_invert+0xe>
 ec8:	cf 01       	movw	r24, r30
 eca:	08 95       	ret
 ecc:	46 2f       	mov	r20, r22
 ece:	47 70       	andi	r20, 0x07	; 7
 ed0:	40 5d       	subi	r20, 0xD0	; 208
 ed2:	41 93       	st	Z+, r20
 ed4:	b3 e0       	ldi	r27, 0x03	; 3
 ed6:	0f d0       	rcall	.+30     	; 0xef6 <__ultoa_invert+0x86>
 ed8:	c9 f7       	brne	.-14     	; 0xecc <__ultoa_invert+0x5c>
 eda:	f6 cf       	rjmp	.-20     	; 0xec8 <__ultoa_invert+0x58>
 edc:	46 2f       	mov	r20, r22
 ede:	4f 70       	andi	r20, 0x0F	; 15
 ee0:	40 5d       	subi	r20, 0xD0	; 208
 ee2:	4a 33       	cpi	r20, 0x3A	; 58
 ee4:	18 f0       	brcs	.+6      	; 0xeec <__ultoa_invert+0x7c>
 ee6:	49 5d       	subi	r20, 0xD9	; 217
 ee8:	31 fd       	sbrc	r19, 1
 eea:	40 52       	subi	r20, 0x20	; 32
 eec:	41 93       	st	Z+, r20
 eee:	02 d0       	rcall	.+4      	; 0xef4 <__ultoa_invert+0x84>
 ef0:	a9 f7       	brne	.-22     	; 0xedc <__ultoa_invert+0x6c>
 ef2:	ea cf       	rjmp	.-44     	; 0xec8 <__ultoa_invert+0x58>
 ef4:	b4 e0       	ldi	r27, 0x04	; 4
 ef6:	a6 95       	lsr	r26
 ef8:	97 95       	ror	r25
 efa:	87 95       	ror	r24
 efc:	77 95       	ror	r23
 efe:	67 95       	ror	r22
 f00:	ba 95       	dec	r27
 f02:	c9 f7       	brne	.-14     	; 0xef6 <__ultoa_invert+0x86>
 f04:	00 97       	sbiw	r24, 0x00	; 0
 f06:	61 05       	cpc	r22, r1
 f08:	71 05       	cpc	r23, r1
 f0a:	08 95       	ret
 f0c:	9b 01       	movw	r18, r22
 f0e:	ac 01       	movw	r20, r24
 f10:	0a 2e       	mov	r0, r26
 f12:	06 94       	lsr	r0
 f14:	57 95       	ror	r21
 f16:	47 95       	ror	r20
 f18:	37 95       	ror	r19
 f1a:	27 95       	ror	r18
 f1c:	ba 95       	dec	r27
 f1e:	c9 f7       	brne	.-14     	; 0xf12 <__ultoa_invert+0xa2>
 f20:	62 0f       	add	r22, r18
 f22:	73 1f       	adc	r23, r19
 f24:	84 1f       	adc	r24, r20
 f26:	95 1f       	adc	r25, r21
 f28:	a0 1d       	adc	r26, r0
 f2a:	08 95       	ret

00000f2c <_exit>:
 f2c:	f8 94       	cli

00000f2e <__stop_program>:
 f2e:	ff cf       	rjmp	.-2      	; 0xf2e <__stop_program>
